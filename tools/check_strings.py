"""
Script to check for string in the codebase not using `trans`.
"""

import ast
import os
import sys
import tokenize


SKIP_FOLDERS = ["/_tests/", "/__pycache__/", "/examples/", "/docs/", "/tools/"]
SKIP_FILES = ["./bundle.py", "./setup.py", "./napari/_version.py"]
SKIP_WORDS = {
    'napari/_qt/layer_controls/qt_points_controls.py': ['Backspace', 'add_points', 'addition_button', 'delete_button', 'delete_shape', 'pan_zoom', 'select_button', 'select_points'],
    'napari/_qt/layer_controls/qt_tracks_controls.py': [],
    'napari/_qt/layer_controls/qt_labels_controls.py': ['Alt', 'Control', 'erase', 'fill', 'fill_button', 'paint', 'paint_button', 'pick_button', 'picker', 'shuffle', 'zoom'],
    'napari/_qt/layer_controls/qt_vectors_controls.py': ['colormap', 'cycle', 'direct'],
    'napari/_qt/layer_controls/__init__.py': [],
    'napari/_qt/layer_controls/qt_colormap_combobox.py': [],
    'napari/_qt/layer_controls/qt_surface_controls.py': [],
    'napari/_qt/layer_controls/qt_image_controls.py': ['RGB', 'rgb'],
    'napari/_qt/layer_controls/qt_shapes_controls.py': ['Backspace', 'delete_button', 'delete_shape', 'direct', 'direct_button', 'ellipse', 'ellipse_button', 'line', 'line_button', 'move_back', 'move_back_button', 'move_front', 'move_front_button', 'path', 'path_button', 'polygon', 'polygon_button', 'rectangle', 'rectangle_button', 'select', 'select_button', 'vertex_insert', 'vertex_insert_button', 'vertex_remove', 'vertex_remove_button', 'zoom'],
    'napari/_qt/layer_controls/qt_image_controls_base.py': ['_range', 'colorbar', 'colormapComboBox', 'contrast_limits', 'contrast_limits_range', 'full range', 'full_clim_range_button', 'reset', 'reset_clims_button', 'top'],
    'napari/_qt/layer_controls/qt_layer_controls_base.py': ['close', 'layer'],
    'napari/_qt/layer_controls/qt_layer_controls_container.py': ['emphasized'],
    'napari/_qt/experimental/__init__.py': [],
    'napari/_qt/experimental/qt_chunk_receiver.py': [],
    'napari/_qt/experimental/qt_poll.py': [],
    'napari/_qt/dialogs/qt_plugin_report.py': ['', '\n```\n</details>', '" style="color:#999">', '/issues/new?&body=', '<!--Provide detail on the error here-->\n\n\n\n<details>\n<summary>Traceback from napari</summary>\n\n```\n', '</a>', '<span style="color:#999;">plugin home page:&nbsp;&nbsp;</span><a href="', 'QtCopyToClipboardButton', 'github.com', 'pluginInfo', 'url'],
    'napari/_qt/dialogs/qt_modal.py': ['QtModalPopup', 'QtPopupFrame', 'Specifying position as a string is only possible if the popup has a parent', 'Wrong type of position ', '`position` argument must have length 4', 'bottom', 'left', 'position must be one of ["top", "left", "bottom", "right"]', 'right', 'screenAt', 'top'],
    'napari/_qt/dialogs/__init__.py': [],
    'napari/_qt/dialogs/qt_notification.py': ['\n                we need a higher order function this to capture the reference to self.\n                ', '0', 'False', 'NAPARI_CATCH_ERRORS', 'QPushButton{padding: 4px 12px 4px 12px; font-size: 11px;min-height: 18px; border-radius: 0;}', 'WARNING', 'close_button', 'expand_button', 'expanded', 'severity_icon', 'source_label'],
    'napari/_qt/dialogs/preferences_dialog.py': [' ', 'NapariConfig', 'json_schema', 'model', 'properties', 'title'],
    'napari/_qt/dialogs/qt_about.py': ['QtAbout', 'QtCopyToClipboardButton'],
    'napari/_qt/dialogs/qt_plugin_dialog.py': [' ', '--no-warn-script-location', '--prefix', '--upgrade', '-m', '-y', 'PATH', 'PYTHONPATH', 'UNKNOWN', '__main__', 'author', 'error_label', 'license', 'linux', 'loading.gif', 'napari_plugin_engine', 'outdated', 'pip', 'pip_install_status', 'remove_button', 'small_text', 'summary', 'uninstall', 'url', 'version', 'warning_icon'],
    'napari/_qt/dialogs/qt_about_key_bindings.py': ['', ' layer', 'secondary'],
    'napari/_qt/dialogs/screenshot_dialog.py': ['', '.png'],
    'napari/_qt/qt_resources/_qt_resources_0.4.5.dev9+g577de77_pyqt5_5.9.7.py': ['.', '0', '5', '8'],
    'napari/_qt/qt_resources/_qt_resources_not-installed_pyqt5_5.12.9.py': ['.'],
    'napari/_qt/qt_resources/_icons.py': ['\n', '\n<!DOCTYPE RCC><RCC version="1.0">\n<qresource prefix="{}">\n{}\n</qresource>\n</RCC>\n', '-g', '.', '.0f', '.py', '/', "<file alias='{alias}'>{path}</file>", 'Cannot compile QRC. Unexpected qtpy API name: ', 'Failed to build PySide2 resources ', 'NAPARI_REBUILD_RESOURCES', 'PyQt5', 'PySide2', 'PySide2 rcc binary not found in ', '_', '_qt_resources_', '_register_napari_resources', 'compile_qrc', 'compile_qt_svgs', 'generate_colorized_svgs', 'icon', 'napari._qt.qt_resources.', 'nt', 'pyside2', 'pyside2-rcc', 'pyside2-rcc.exe', 'python', 'rcc', 'rcc.exe', 'res.qrc', 'themes', 'warning', '{color}/{svg_stem}{opacity}.svg'],
    'napari/_qt/qt_resources/_qt_resources_0.4.4.dev29+g58677b5_pyside2_5.12.9.py': ['.'],
    'napari/_qt/qt_resources/_qt_resources_PyQt5_5_15_2_9e6fe1a88d30d1b7988f9d8351e8c3e4.py': ['.'],
    'napari/_qt/qt_resources/_svg.py': ['QColoredSVGIcon', 'icon', 'utf-8'],
    'napari/_qt/qt_resources/__init__.py': ['', '*.qss', 'QColoredSVGIcon', '_register_napari_resources', 'compile_qt_svgs', 'get_stylesheet', 'styles'],
    'napari/_qt/qt_resources/_qt_resources_0.4.5.dev9+g577de77_pyqt5_5.12.9.py': ['.'],
    'napari/_qt/qt_resources/_qt_resources_PyQt5_5_9_7_9e6fe1a88d30d1b7988f9d8351e8c3e4.py': ['.', '0', '5', '8'],
    'napari/_qt/qt_resources/_qt_resources_0.4.4.dev29+g58677b5_pyqt5_5.12.9.py': ['.'],
    'napari/_qt/containers/qt_tree_view.py': ['NodeType'],
    'napari/_qt/containers/_base_item_view.py': ['ItemType'],
    'napari/_qt/containers/__init__.py': ['QtListModel', 'QtListView', 'QtNodeTreeModel', 'QtNodeTreeView', 'create_model', 'create_view'],
    'napari/_qt/containers/_factory.py': ['Cannot create Qt model for obj: ', 'Cannot create Qt view for obj: '],
    'napari/_qt/containers/qt_tree_model.py': [' ', ' ➡ ', 'NodeMimeData', 'NodeType', 'application/x-tree-node', 'dropMimeData: indices ', 'nested_index must be an int or tuple of int.', 'root node must be an instance of ', 'text/plain'],
    'napari/_qt/containers/qt_list_view.py': ['ItemType'],
    'napari/_qt/containers/qt_list_model.py': [' ', ' ➡ ', 'ItemType', 'QMimeData', 'application/x-list-index', 'dropMimeData: indices ', 'text/plain'],
    'napari/_qt/containers/_base_item_model.py': ['ItemType', '_root', 'root must be an instance of '],
    'napari/_qt/perf/__init__.py': [],
    'napari/_qt/perf/qt_event_tracing.py': [':', 'qt_event'],
    'napari/_qt/perf/qt_performance.py': ['', '%vms', '1', '10', '100', '15', '20', '200', '30', '40', '5', '50', 'UpdateRequest'],
    'napari/_qt/perf/qt_debug_menu.py': ['.json', 'Alt+T', 'Shift+Alt+T', 'Stop Recording'],
    'napari/_qt/widgets/qt_color_swatch.py': ['#colorSwatch {background-color: ', ')', ',', ';}', 'CustomColorDialog', 'QColorSwatchEdit', 'QtColorPopup', '\\(?([\\d.]+),\\s*([\\d.]+),\\s*([\\d.]+),?\\s*([\\d.]+)?\\)?', 'colorSwatch', 'int', 'rgba(', 'transparent'],
    'napari/_qt/widgets/qt_viewer_buttons.py': ['Backspace', 'Control', 'Shift', 'console', 'enabled', 'expanded', 'grid_view_button', 'home', 'mode', 'ndisplay', 'ndisplay_button', 'new_labels', 'new_points', 'new_shapes', 'roll', 'transpose'],
    'napari/_qt/widgets/qt_splash_screen.py': [],
    'napari/_qt/widgets/qt_layerlist.py': ['LayerList', 'Optional[QtChunkReceiver]', 'layer', 'layer_type_label', 'mode', 'selected', 'thumbnail', 'visibility'],
    'napari/_qt/widgets/qt_theme_sample.py': ['\n<h3>Heading</h3>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation\nullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit\nesse cillum dolore eu fugiat nulla pariatur. Excepteur\nsint occaecat cupidatat non proident, sunt in culpa qui\nofficia deserunt mollit anim id est laborum.</p>\n', ' is not a recognized theme', '&Radio button 1', 'Date of Birth', 'Exclusive Radio Buttons', 'Female', 'Height', 'I am a tooltip', 'LineEdit placeholder...', 'Male', 'R&adio button 2', 'Ra&dio button 3', 'Sex', 'Tab 1', 'Tab 2', 'Weight', '__main__', 'a', 'b', 'c', 'cd', 'checked', 'dark', 'emphasized', 'label', 'push button', 'tab demo', 'tristate', 'unchecked'],
    'napari/_qt/widgets/qt_size_preview.py': ['', 'm', 'px'],
    'napari/_qt/widgets/qt_range_slider_popup.py': ['', '8', 'display_max', 'display_min', 'slice_label', '{:.{}f}'],
    'napari/_qt/widgets/qt_plugin_sorter.py': ['\n', '">', '.', ':[a-z]+:`([^`]+)`', '<', '</a>', '<a href="', '<br>', '<code>\\1</code>', '<em>\\1</em>', '<strong>\\1</strong>', '>', 'Parameters', '\\*([^\\*]+)\\*', '\\*\\*([^\\*]+)\\*\\*', '`([^`]+)`_', '``', '``([^`]+)``', 'enabled', 'firstresult', 'h3', 'info_icon', 'napari_', 'small_text', '~'],
    'napari/_qt/widgets/qt_eliding_label.py': [''],
    'napari/_qt/widgets/__init__.py': [],
    'napari/_qt/widgets/qt_highlight_preview.py': ['', 'Maximum value must be larger than ', 'Minimum value must be smaller than ', 'border: 1px solid white;', 'px', 'white'],
    'napari/_qt/widgets/qt_dims_slider.py': [' ', 'False', 'True', '_', 'axis_label', 'fpsSpinBox', 'frame_requested', 'playDirectionCheckBox', 'playing', 'reverse', 'setStepType', 'slice_label', 'slice_label_sep'],
    'napari/_qt/widgets/qt_dict_table.py': ['', "'data' argument must be a list of dicts", '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$', 'https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)', 'mailto:'],
    'napari/_qt/widgets/qt_mode_buttons.py': ['mode'],
    'napari/_qt/widgets/qt_scrollbar.py': [],
    'napari/_qt/widgets/qt_dims.py': ['', '8', 'axis_label', 'last_used', 'slice_label'],
    'napari/_qt/widgets/qt_viewer_dock_widget.py': ['', 'QTitleBarCloseButton', 'QTitleBarFloatButton', 'QtCustomTitleBar', 'QtCustomTitleBarLine', '`allowed_areas` must be a list or tuple', 'all allowed_areas argument must be in ', 'area argument must be in ', 'bottom', 'dockWidgetArea', 'left', 'right', 'top', 'vertical'],
    'napari/_qt/widgets/qt_range_slider.py': ['HRange', 'bar', 'max', 'min', 'none'],
    'napari/_qt/_constants.py': [],
    'napari/_qt/qt_main_window.py': [' ', 'Alt+S', 'Alt+Shift+S', 'Ctrl+/', 'Ctrl+Alt+/', 'Ctrl+Alt+O', 'Ctrl+Alt+P', 'Ctrl+F', 'Ctrl+M', 'Ctrl+O', 'Ctrl+Q', 'Ctrl+S', 'Ctrl+Shift+O', 'Ctrl+Shift+P', 'Ctrl+Shift+S', 'Ctrl+W', '_', '_qt_window', 'all', 'allowed_areas', 'area', 'auto_call', 'bottom', 'call_button', 'display_name', 'dock', 'func', 'layout', 'napari', 'napari.viewer.Viewer', 'napari_viewer', 'plugin_sorter_widget', 'raw_stylesheet', 'reset_choices', 'right', 'run', 'vertical'],
    'napari/_qt/qt_event_loop.py': ['', ' event loop', '(force=True)`', '(max_loop_level=', ')`', '..', '.To enter *another* event loop, use `', 'A QApplication is already running with ', 'IPython', 'No Qt app has been created. One can be created by calling `get_app()` or qtpy.QtWidgets.QApplication([])', "QApplication already existed, these arguments to to 'get_app' were ignored: {}", 'Refusing to run a QApplication with no topLevelWidgets. To run the app anyway, use `', 'app_id', 'app_name', 'app_version', 'frozen', 'gui_qt', 'icon', 'ipy_interactive', 'logo.png', 'napari', 'napari.napari.viewer.', 'napari.org', 'nt', 'org_domain', 'org_name', 'qt', 'resources', 'run', 's'],
    'napari/_qt/__init__.py': ['\n    napari was tested with QT library `>=5.12.3`.\n    The version installed is ', '. Please report any issues with this\n    specific QT version at https://github.com/Napari/napari/issues.\n    ', '5.12.3', 'No Qt bindings could be found', 'No Qt bindings could be found.\n\nnapari requires either PyQt5 or PySide2 to be installed in the environment.\nTo install the default backend (currently PyQt5), run "pip install napari[all]"\nYou may also use "pip install napari[pyside2]" for Pyside2, or "pip install napari[pyqt5]" for PyQt5', 'PySide2', 'QT_PLUGIN_PATH', 'Qt', 'plugins'],
    'napari/_qt/qthreading.py': [' cannot be used with FunctionWorker, use GeneratorWorker instead', ' cannot be used with GeneratorWorker, use FunctionWorker instead', ' ms)', ' must be a subclass of WorkerBase', '"', '" failed to define work() method', '"_connect[', 'Generator function ', 'Regular function ', "The '_connect' argument must be a dict", 'This worker is already started!', 'Worker ', 'WorkerBase', 'Workers did not quit gracefully in the time allotted (', ']" must be a function or sequence of functions', '_connect', '_connect parameter must be a dict', '_ignore_errors', '_start_thread', '_worker_class', 'errored'],
    'napari/_qt/utils.py': ['!QBYTE_', 'PySide2', 'native'],
    'napari/_qt/qt_viewer.py': ['\n', 'Ctrl+Shift+C', 'Ctrl+Shift+P', 'Optional[QtPoll]', 'Optional[RemoteManager]', 'bottom', 'canvas', 'circle', 'cross', 'expanded', 'forbidden', 'layerList', 'left', 'pointing', 'raw_stylesheet', 'right', 'square', 'standard', 'top'],

    'napari/utils/tree/__init__.py': ['Group', 'Node'],
    'napari/utils/tree/group.py': ['  ', '  │', 'Group', 'NodeType', '└──', '├──'],
    'napari/utils/tree/node.py': ['\n', 'Cannot unparent orphaned Node: {self!r}', 'Node'],
    'napari/utils/settings/__init__.py': [],
    'napari/utils/settings/_defaults.py': [', ', 'Use interactive %gui qt event loop when creating napari Viewers in IPython', 'console_notification_level', 'dark', 'first_time', 'gui_notification_level', 'napari_', 'plugins_call_order', 'preferences_size', 'pyqt5', 'pyside2', 'schema_version', 'window_fullscreen', 'window_maximized', 'window_position', 'window_size', 'window_state', 'window_statusbar'],
    'napari/utils/settings/_manager.py': ['', 'Settings', 'The content of the napari settings file could not be read.\n\nThe default settings will be used and the content of the file will be replaced the next time settings are changed.\n\nError: \n', 'json_schema', 'loc', 'model', 'w'],
    'napari/utils/transforms/transforms.py': ['. For other matrices, set the affine_matrix or linear_matrix directly.', 'Affine', 'Cannot subset arbitrary transforms.', 'Inverse function was not provided.', 'Only upper triangular or lower triangular matrices are accepted for shear, got ', 'ScaleTranslate', 'Transform', 'Transform composition rule not provided', 'TransformChain'],
    'napari/utils/transforms/transform_utils.py': ['%d is a strange number of shear elements', 'Improper transform matrix ', 'Scalars are not valid values for shear. Shear must be an upper triangular vector or square matrix with ones along the main diagonal.'],
    'napari/utils/transforms/__init__.py': [],
    'napari/utils/events/containers/_nested_list.py': [' to TypedList expecting type ', ')', ', dest_index=', '. Must be an int or tuple', "Can't yet deal with slice source indices in multimove", 'Cannot add object with type ', 'Destination index may not be a slice', 'Group cannot move itself', 'Invalid nested index: ', 'NestableEventedList[_T]', 'ParentIndex', 'Terminal source index may not be a slice', 'The parent index must be a tuple of int', '_T', 'index', 'move(src_index=', 'new_index'],
    'napari/utils/events/containers/_set.py': ['(', ')', 'Value is not a valid sequence: ', '[', ']', '_T', 'changed', 'events'],
    'napari/utils/events/containers/_evented_list.py': [' to extended slice of size ', ')', ', dest_index=', ', got ', 'Can only assign an iterable to slice', 'Can only move integer or slice indices', 'Deletion index must be ', 'Destination index may not be a slice', 'EventedList[_T]', 'attempt to assign sequence of size ', 'changed', 'events', 'index', 'inserted', 'inserting', 'move_multiple(sources=', 'moved', 'moving', 'removed', 'removing', 'reordered'],
    'napari/utils/events/containers/__init__.py': ['EventedList', 'EventedSet', 'NestableEventedList', 'Selectable', 'SelectableEventedList', 'SelectableNestableEventedList', 'Selection', 'TypedMutableSequence'],
    'napari/utils/events/containers/_typed.py': [' is not in list', ' to TypedList expecting type ', 'Can only assign an iterable to slice', 'Cannot add object with type ', 'TypedMutableSequence[_T]', '_L', '_T'],
    'napari/utils/events/containers/_selectable_list.py': ['Cannot select item that is not in list: ', '_T'],
    'napari/utils/events/containers/_selection.py': ['(', ')', 'ModelField', 'Value is not a valid sequence: ', '[', ']', '_S', '_T', '_current', 'current', 'selection'],
    'napari/utils/events/event.py': [' ', '<...>', '<{} {}>', '=', 'Cannot unblock %s for callback %s; emitter was not previously blocked.', 'Emitter must be specified as either an EventEmitter instance or Event subclass. (got %s=%s)', 'EmitterGroup', "EmitterGroup already has an emitter named '%s'", 'Event emitters can be called with an Event instance or with keyword arguments only.', 'Event source-stack mismatch.', 'EventBlockerAll', "The name '%s' cannot be used as an emitter; it is already an attribute of EmitterGroup", '_', '__name__', 'always', 'cannot place callback before "%s" and after "%s" for callbacks: %s', 'criteria "%s" is in the current callback list %s times:\n%s\n%s', 'first', 'last', 'never', 'on_%s', 'position must be "first" or "last", not %s', 'print_callback_errors must be "first", "reminders", "always", or "never"', 'ref "%s" is not unique', 'ref must be a bool or string', 'reminders', 'type', 'weakref.ReferenceType[Any]'],
    'napari/utils/events/event_utils.py': [],
    'napari/utils/events/__init__.py': ['EmitterGroup', 'Event', 'EventEmitter', 'EventedList', 'EventedModel', 'EventedSet', 'NestableEventedList', 'SelectableEventedList', 'Selection', 'SupportsEvents', 'TypedMutableSequence', 'disconnect_events'],
    'napari/utils/events/types.py': [],
    'napari/utils/events/custom_types.py': ['Array', '__dtype__'],
    'napari/utils/events/evented_model.py': ['PySide2', 'The `asdict` method has been renamed `dict` and is now deprecated. It will be removed in 0.4.7', 'Unsupported update from ', '__weakref__', '_json_encode', 'events'],
    'napari/utils/perf/_timers.py': [' ', '.3f', '0', 'Add one instant event.\n\n        Parameters\n        ----------\n        name : PerfEvent\n            Add this event.\n        kwargs\n            Arguments to display in the Args section of the Chrome Tracing GUI.\n        ', 'C', 'I', 'NAPARI_PERFMON', 'X', 'ms'],
    'napari/utils/perf/_stat.py': ['no values'],
    'napari/utils/perf/__init__.py': ['0', 'NAPARI_PERFMON'],
    'napari/utils/perf/_event.py': ['Origin', 'Span', 'X', 'process_id thread_id', 'start_ns end_ns'],
    'napari/utils/perf/_trace_file.py': ['C', 'I', 'X', 'args', 'cat', 'dur', 'name', 'none', 'p', 'ph', 'pid', 's', 'tid', 'ts', 'w'],
    'napari/utils/perf/_patcher.py': [' has no attribute ', '.', 'Module ', 'Module not found: ', 'Nested attribute not found: ', 'Parent ', 'Patcher: [ERROR] ', 'Patcher: [WARN] skipping duplicate ', 'Patcher: patching '],
    'napari/utils/perf/_compat.py': ['Compatibility version for pre Python 3.7.'],
    'napari/utils/perf/_config.py': [" has no callable list '", "'", '0', '1', 'NAPARI_PERFMON', 'callable_lists', 'trace_callables', 'trace_file_on_start', 'trace_qt_events'],
    'napari/utils/colormaps/vendored/_cm.py': ['Accent', 'Blues', 'BrBG', 'BuGn', 'BuPu', 'CMRmap', 'Dark2', 'GnBu', 'Greens', 'Greys', 'OrRd', 'Oranges', 'PRGn', 'Paired', 'Pastel1', 'Pastel2', 'PiYG', 'PuBu', 'PuBuGn', 'PuOr', 'PuRd', 'Purples', 'RdBu', 'RdGy', 'RdPu', 'RdYlBu', 'RdYlGn', 'Reds', 'Set1', 'Set2', 'Set3', 'Spectral', 'Wistia', 'YlGn', 'YlGnBu', 'YlOrBr', 'YlOrRd', '_g{}', 'afmhot', 'autumn', 'binary', 'blue', 'bone', 'brg', 'bwr', 'cool', 'coolwarm', 'copper', 'cubehelix', 'flag', 'gist_earth', 'gist_gray', 'gist_heat', 'gist_ncar', 'gist_rainbow', 'gist_stern', 'gist_yarg', 'gnuplot', 'gnuplot2', 'gray', 'green', 'hot', 'hsv', 'jet', 'listed', 'nipy_spectral', 'ocean', 'pink', 'prism', 'rainbow', 'red', 'seismic', 'spring', 'summer', 'tab10', 'tab20', 'tab20b', 'tab20c', 'terrain', 'winter'],
    'napari/utils/colormaps/vendored/cm.py': [', ', 'Arguments must include a name or a Colormap', 'Colormap %s is not recognized. Possible values are: %s', 'Colormap name must be a string', 'Floating point image RGB values must be in the 0..1 range.', 'Image RGB array must be uint8 or floating point; found %s', 'You must first set_array for mappable', '_r', 'array', 'f', 'listed', 'magma', 'red', 'third dimension must be 3 or 4'],
    'napari/utils/colormaps/vendored/colorconv.py': [')', ', ', '10', '2', 'A', 'D50', 'D55', 'D65', 'D75', 'E', 'Expected 2D, 3D, or 4D array, got %iD.', "Unknown illuminant/observer combination        ('{0}', '{1}')", 'got (', 'ignore', 'the background must be a tuple with 3 items - the RGB color of the background. Got {0} items.', 'the input array must be have a shape == ([ ..,] 3)), ', 'the input array must have a shape == ([ ..,] 4)), got {0}'],
    'napari/utils/colormaps/vendored/__init__.py': [],
    'napari/utils/colormaps/vendored/_color_data.py': ['#000000', '#000080', '#00008B', '#0000CD', '#0000FF', '#0000ff', '#000133', '#00022e', '#00035b', '#000435', '#001146', '#002d04', '#004577', '#005249', '#00555a', '#005f6a', '#006400', '#008000', '#008080', '#008B8B', '#009337', '#00BFFF', '#00CED1', '#00FA9A', '#00FF00', '#00FF7F', '#00FFFF', '#00bfbf', '#00fbb0', '#00ffff', '#010fcc', '#01153e', '#01386a', '#014182', '#014600', '#014d4e', '#015482', '#0165fc', '#016795', '#017371', '#017374', '#017a79', '#017b92', '#01889f', '#019529', '#01a049', '#01b44c', '#01c08d', '#01f9c6', '#01ff07', '#020035', '#0203e2', '#02066f', '#021bf9', '#02590f', '#028f1e', '#029386', '#02ab2e', '#02c14d', '#02ccfe', '#02d8e9', '#03012d', '#030764', '#030aa7', '#033500', '#0339f8', '#0343df', '#03719c', '#040273', '#040348', '#042e60', '#044a05', '#045c5a', '#047495', '#048243', '#0485d1', '#04d8b2', '#04d9ff', '#04f489', '#0504aa', '#05472a', '#05480d', '#054907', '#05696b', '#056eee', '#05ffa6', '#062e03', '#06470c', '#0652ff', '#069af3', '#06b1c4', '#06b48b', '#06c2ac', '#070d0d', '#0804f9', '#08787f', '#089404', '#08ff08', '#0a437a', '#0a481e', '#0a5f38', '#0a888a', '#0add08', '#0aff02', '#0b4008', '#0b5509', '#0b8b87', '#0bf77d', '#0bf9ea', '#0c06f7', '#0c1793', '#0cb577', '#0cdc73', '#0cff0c', '#0d75f8', '#0e87cc', '#0f9b8e', '#0ffef9', '#107ab0', '#10a674', '#11875d', '#12e193', '#137e6d', '#13bbaf', '#13eac9', '#152eff', '#154406', '#155084', '#15b01a', '#17becf', '#1805db', '#18d17b', '#191970', '#1E90FF', '#1b2431', '#1bfc06', '#1d0200', '#1d5dec', '#1e488f', '#1e9167', '#1ef876', '#1f0954', '#1f3b4d', '#1f6357', '#1f77b4', '#1fa774', '#1fb57a', '#2000b1', '#20B2AA', '#20c073', '#20f986', '#2138ab', '#214761', '#21c36f', '#21fc0d', '#2242c7', '#228B22', '#23c48b', '#247afd', '#24bca8', '#25a36f', '#25ff29', '#26538d', '#26f7fd', '#276ab3', '#280137', '#287c37', '#29465b', '#2976bb', '#2E8B57', '#2F4F4F', '#2a0134', '#2a7e19', '#2afeb7', '#2b5d34', '#2baf6a', '#2bb179', '#2c6fbb', '#2ca02c', '#2cfa1f', '#2dfe54', '#2e5a88', '#2ee8bb', '#2fef10', '#31668a', '#32CD32', '#32bf84', '#33b864', '#34013f', '#341c02', '#343837', '#35063e', '#35530a', '#35ad6b', '#36013f', '#363737', '#373e02', '#3778bf', '#380282', '#380835', '#388004', '#39ad48', '#3CB371', '#3a18b1', '#3a2efe', '#3ae57f', '#3b5b92', '#3b638c', '#3b719f', '#3c0008', '#3c4142', '#3c4d03', '#3c73a8', '#3c9992', '#3d0734', '#3d1c02', '#3d7afd', '#3d9973', '#3e82fc', '#3eaf76', '#3f012c', '#3f829d', '#3f9b0b', '#40E0D0', '#40a368', '#40fd14', '#410200', '#411900', '#4169E1', '#419c03', '#41fdfe', '#42b395', '#430541', '#436bad', '#448ee4', '#464196', '#4682B4', '#475f94', '#483D8B', '#48D1CC', '#48c072', '#490648', '#49759c', '#4984b8', '#4B0082', '#4a0100', '#4b006e', '#4b0101', '#4b57db', '#4b5d16', '#4b6113', '#4c9085', '#4da409', '#4e0550', '#4e518b', '#4e5481', '#4e7496', '#4efd54', '#4f738e', '#4f9153', '#507b9c', '#50a747', '#510ac9', '#516572', '#5170d7', '#51b73b', '#526525', '#533cc6', '#536267', '#53fca1', '#53fe5c', '#544e03', '#548d44', '#54ac68', '#5539cc', '#556B2F', '#5684ae', '#56ae57', '#56fca2', '#5729ce', '#580f41', '#58bc08', '#59656d', '#598556', '#5F9EA0', '#5a06ef', '#5a7d9a', '#5a86ad', '#5b7c99', '#5c8b15', '#5ca904', '#5cac2d', '#5cb200', '#5d06e9', '#5d1451', '#5d21d0', '#5e819d', '#5e9b8a', '#5edc1f', '#5f34e7', '#5f9e8f', '#5fa052', '#601ef9', '#60460f', '#606602', '#607c8e', '#610023', '#6140ef', '#61de2a', '#61e160', '#6241c7', '#6258c4', '#632de9', '#638b27', '#63a950', '#63b365', '#63f7b4', '#645403', '#647d8e', '#6488ea', '#6495ED', '#650021', '#653700', '#657432', '#658b38', '#658cbb', '#658d6d', '#65ab7c', '#65fe08', '#661aee', '#663399', '#665fd1', '#667c3e', '#667e2c', '#66CDAA', '#673a3f', '#677a04', '#680018', '#6832e3', '#696006', '#696112', '#696969', '#698339', '#699d4c', '#69d84f', '#6A5ACD', '#6B8E23', '#6a6e09', '#6a79f7', '#6b4247', '#6b7c85', '#6b8ba4', '#6ba353', '#6c3461', '#6c7a0e', '#6d5acf', '#6dedfd', '#6e1005', '#6e750e', '#6ecb3c', '#6f6c0a', '#6f7632', '#6f7c00', '#6f828a', '#6fc276', '#703be7', '#706c11', '#708090', '#70b23f', '#719f91', '#71aa34', '#720058', '#728639', '#728f02', '#730039', '#734a65', '#735c12', '#738595', '#742802', '#748500', '#748b97', '#749551', '#74a662', '#750851', '#751973', '#758000', '#758da3', '#75b84f', '#75bbfd', '#75fd63', '#76424e', '#769958', '#76a973', '#76cd26', '#76fda8', '#76ff7b', '#770001', '#778899', '#77926f', '#77a1b5', '#77ab56', '#789b73', '#78d1b6', '#7B68EE', '#7CFC00', '#7FFF00', '#7FFFD4', '#7a5901', '#7a687f', '#7a6a4f', '#7a9703', '#7af9ab', '#7b002c', '#7b0323', '#7b5804', '#7bb274', '#7bc8f6', '#7bf2da', '#7bfdc7', '#7d7103', '#7d7f7c', '#7e1e9c', '#7e4071', '#7ea07a', '#7ebd01', '#7ef4cc', '#7efbb3', '#7f2b0a', '#7f4e1e', '#7f5112', '#7f5e00', '#7f5f00', '#7f684e', '#7f7053', '#7f7f7f', '#7f8f4e', '#800000', '#800080', '#80013f', '#805b87', '#808000', '#808080', '#80f9ad', '#820747', '#825f87', '#826d8c', '#828344', '#82a67d', '#82cafc', '#82cbb2', '#836539', '#840000', '#84597e', '#84b701', '#850e04', '#856798', '#85a3b2', '#866f85', '#86775f', '#86a17d', '#874c62', '#8756e4', '#875f42', '#876e4b', '#87CEEB', '#87CEFA', '#87a922', '#87ae73', '#87fd05', '#885f01', '#886806', '#887191', '#889717', '#88b378', '#894585', '#895b7b', '#89a0b0', '#89a203', '#89fe05', '#8A2BE2', '#8B0000', '#8B008B', '#8B4513', '#8FBC8F', '#8a6e45', '#8ab8fe', '#8af1fe', '#8b2e16', '#8b3103', '#8b88f8', '#8c000f', '#8c0034', '#8c564b', '#8cfd7e', '#8cff9e', '#8cffdb', '#8d5eb7', '#8d8468', '#8e7618', '#8e82fe', '#8eab12', '#8ee53f', '#8f1402', '#8f7303', '#8f8ce7', '#8f9805', '#8f99fb', '#8fae22', '#8fb67b', '#8ffe09', '#8fff9f', '#90EE90', '#90b134', '#90e4c1', '#90fda9', '#910951', '#916e99', '#920a4e', '#922b05', '#929591', '#929901', '#9370DB', '#937c00', '#9400D3', '#94568c', '#9467bd', '#947706', '#947e94', '#94a617', '#94ac02', '#94b21c', '#952e8f', '#95a3a6', '#95d0fc', '#960056', '#964e02', '#966ebd', '#96ae8d', '#96b403', '#96f97b', '#978a84', '#980002', '#983fb2', '#98568d', '#985e2b', '#98FB98', '#98eff9', '#98f6b0', '#9900fa', '#990147', '#990f4b', '#9932CC', '#997570', '#99cc04', '#9ACD32', '#9a0200', '#9a0eea', '#9a3001', '#9a6200', '#9aae07', '#9af764', '#9b5fc0', '#9b7a01', '#9b8f55', '#9bb53c', '#9be5aa', '#9c6d57', '#9c6da5', '#9cbb04', '#9cef43', '#9d0216', '#9d0759', '#9d5783', '#9d7651', '#9db92c', '#9dbcd4', '#9dc100', '#9dff00', '#9e003a', '#9e0168', '#9e3623', '#9e43a2', '#9f2305', '#9f8303', '#9ffeb0', '#A0522D', '#A52A2A', '#A9A9A9', '#ADD8E6', '#ADFF2F', '#AFEEEE', '#B0C4DE', '#B0E0E6', '#B22222', '#B8860B', '#BA55D3', '#BC8F8F', '#BDB76B', '#C0C0C0', '#C71585', '#CD5C5C', '#CD853F', '#D2691E', '#D2B48C', '#D3D3D3', '#D8BFD8', '#DA70D6', '#DAA520', '#DB7093', '#DC143C', '#DCDCDC', '#DDA0DD', '#DEB887', '#E0FFFF', '#E6E6FA', '#E9967A', '#EE82EE', '#EEE8AA', '#F08080', '#F0E68C', '#F0F8FF', '#F0FFF0', '#F0FFFF', '#F4A460', '#F5DEB3', '#F5F5DC', '#F5F5F5', '#F5FFFA', '#F8F8FF', '#FA8072', '#FAEBD7', '#FAF0E6', '#FAFAD2', '#FDF5E6', '#FF0000', '#FF00FF', '#FF1493', '#FF4500', '#FF6347', '#FF69B4', '#FF7F50', '#FF8C00', '#FFA07A', '#FFA500', '#FFB6C1', '#FFC0CB', '#FFD700', '#FFDAB9', '#FFDEAD', '#FFE4B5', '#FFE4C4', '#FFE4E1', '#FFEBCD', '#FFEFD5', '#FFF0F5', '#FFF5EE', '#FFF8DC', '#FFFACD', '#FFFAF0', '#FFFAFA', '#FFFF00', '#FFFFE0', '#FFFFF0', '#FFFFFF', '#a0025c', '#a00498', '#a03623', '#a0450e', '#a0bf16', '#a0febf', '#a13905', '#a24857', '#a2653e', '#a2a415', '#a2bffe', '#a2cffe', '#a442a0', '#a484ac', '#a4be5c', '#a4bf20', '#a50055', '#a552e6', '#a55af4', '#a57e52', '#a5a391', '#a5a502', '#a5fbd5', '#a66fb5', '#a6814c', '#a6c875', '#a6fbb2', '#a75e09', '#a7ffb5', '#a83c09', '#a8415b', '#a87900', '#a87dc2', '#a88905', '#a88f59', '#a8a495', '#a8b504', '#a8ff04', '#a90308', '#a9561e', '#a9be70', '#a9f971', '#aa23ff', '#aa2704', '#aaa662', '#aaff32', '#ab1239', '#ab7e4c', '#ab9004', '#ac1db8', '#ac4f06', '#ac7434', '#ac7e04', '#ac86a8', '#ac9362', '#acbb0d', '#acbf69', '#acc2d9', '#acfffc', '#ad03de', '#ad0afd', '#ad8150', '#ad900d', '#ada587', '#adf802', '#ae7181', '#ae8b0c', '#aefd6c', '#aeff6e', '#af2f0d', '#af6f09', '#af884a', '#afa88b', '#b00149', '#b0054b', '#b04e0f', '#b0dd16', '#b0ff9d', '#b16002', '#b17261', '#b1916e', '#b1d1fc', '#b1d27b', '#b1fc99', '#b1ff65', '#b25f03', '#b26400', '#b2713d', '#b27a01', '#b29705', '#b2996e', '#b2fba5', '#b36ff6', '#b5485d', '#b59410', '#b5c306', '#b5ce08', '#b66325', '#b66a50', '#b6c406', '#b6ffbb', '#b75203', '#b790d4', '#b79400', '#b7c9e2', '#b7e1a1', '#b7fffa', '#b8ffeb', '#b9484e', '#b96902', '#b9a281', '#b9cc81', '#b9ff66', '#ba6873', '#ba9e88', '#bb3f3f', '#bbf90f', '#bc13fe', '#bcbd22', '#bccb7a', '#bcecac', '#bcf5a6', '#bd6c48', '#bdf6fe', '#bdf8a3', '#be0119', '#be013c', '#be03fd', '#be6400', '#beae8a', '#befd73', '#befdb7', '#bf00bf', '#bf77f6', '#bf9005', '#bf9b0c', '#bfac05', '#bfbf00', '#bff128', '#bffe28', '#c0022f', '#c04e01', '#c071fe', '#c0737a', '#c0fa8b', '#c0fb2d', '#c14a09', '#c1c6fc', '#c1f80a', '#c1fd95', '#c20078', '#c27e79', '#c292a1', '#c2b709', '#c2be0e', '#c2ff89', '#c3909b', '#c3fbf4', '#c44240', '#c45508', '#c48efd', '#c4a661', '#c4fe82', '#c4fff7', '#c5c9c7', '#c65102', '#c69c04', '#c69f59', '#c6f808', '#c6fcff', '#c74767', '#c760ff', '#c77986', '#c79fef', '#c7ac7d', '#c7c10c', '#c7fdb5', '#c83cb9', '#c85a53', '#c875c4', '#c87606', '#c87f89', '#c88d94', '#c8aca9', '#c8fd3d', '#c8ffb0', '#c94cbe', '#c95efb', '#c9643b', '#c9ae74', '#c9b003', '#c9d179', '#c9ff27', '#ca0147', '#ca6641', '#ca6b02', '#ca7b80', '#ca9bf7', '#caa0ff', '#cafffb', '#cb00f5', '#cb0162', '#cb416b', '#cb6843', '#cb7723', '#cb9d06', '#cba560', '#cbf85f', '#cc7a8b', '#ccad60', '#ccfd7f', '#cd5909', '#cd7584', '#cdc50a', '#cdfd02', '#ce5dae', '#cea2fd', '#ceaefa', '#ceb301', '#cf0234', '#cf524e', '#cf6275', '#cfaf7b', '#cffdbc', '#cfff04', '#d0c101', '#d0e429', '#d0fe1d', '#d0fefe', '#d1768f', '#d1b26f', '#d1ffbd', '#d2bd0a', '#d3494e', '#d3b683', '#d46a7e', '#d4ffff', '#d5174e', '#d5869d', '#d58a94', '#d5ab09', '#d5b60a', '#d5ffff', '#d62728', '#d648d7', '#d6b4fc', '#d6fffa', '#d6fffe', '#d725de', '#d767ad', '#d7fffe', '#d8863b', '#d8dcd6', '#d90166', '#d94ff5', '#d9544d', '#d99b82', '#da467d', '#db4bda', '#db5856', '#dbb40c', '#dc4d01', '#dd85d7', '#ddd618', '#de0c62', '#de7e5d', '#de9dac', '#df4ec8', '#dfc5fe', '#e03fd8', '#e17701', '#e2ca76', '#e377c2', '#e4cbff', '#e50000', '#e6daa6', '#e6f2a2', '#e78ea5', '#ec2d01', '#ed0dd9', '#edc8ff', '#eecffe', '#eedc5b', '#ef1de7', '#ef4026', '#efb435', '#efc0fe', '#f075e6', '#f0833a', '#f0944d', '#f10c45', '#f1da7a', '#f1f33f', '#f29e8e', '#f2ab15', '#f36196', '#f4320c', '#f43605', '#f4d054', '#f504c9', '#f5054f', '#f5bf03', '#f6688e', '#f6cefc', '#f7022a', '#f7879a', '#f7d560', '#f8481c', '#f97306', '#f9bc08', '#fa2a55', '#fa4224', '#fa5ff7', '#fac205', '#faee66', '#fafe4b', '#fb2943', '#fb5581', '#fb5ffc', '#fb7d07', '#fbdd7e', '#fbeeac', '#fc2647', '#fc5a50', '#fc824a', '#fc86aa', '#fcb001', '#fcc006', '#fce166', '#fcf679', '#fcfc81', '#fd3c06', '#fd411e', '#fd4659', '#fd5956', '#fd798f', '#fd8d49', '#fdaa48', '#fdb0c0', '#fdb147', '#fdb915', '#fdc1c5', '#fddc5c', '#fdde6c', '#fdee73', '#fdfdfe', '#fdff38', '#fdff52', '#fdff63', '#fe0002', '#fe019a', '#fe01b1', '#fe02a2', '#fe2c54', '#fe2f4a', '#fe420f', '#fe46a5', '#fe4b03', '#fe7b7c', '#fe828c', '#fe83cc', '#fe86a4', '#fea993', '#feb209', '#feb308', '#fec615', '#fed0fc', '#fedf08', '#fef69e', '#fefcaf', '#feff7f', '#feffca', '#ff0000', '#ff000d', '#ff028d', '#ff0490', '#ff073a', '#ff0789', '#ff08e8', '#ff474c', '#ff5b00', '#ff6163', '#ff63e9', '#ff69af', '#ff6cb5', '#ff6f52', '#ff724c', '#ff7855', '#ff796c', '#ff7f0e', '#ff7fa7', '#ff81c0', '#ff9408', '#ff964f', '#ff9a8a', '#ffa62b', '#ffa756', '#ffab0f', '#ffad01', '#ffb07c', '#ffb16d', '#ffb19a', '#ffb2d0', '#ffb7ce', '#ffbacd', '#ffc512', '#ffc5cb', '#ffcfdc', '#ffd1df', '#ffd8b1', '#ffda03', '#ffdf22', '#ffe36e', '#ffe5ad', '#fff39a', '#fff4f2', '#fff917', '#fff9d0', '#fffa86', '#fffcc4', '#fffd01', '#fffd37', '#fffd74', '#fffd78', '#fffe40', '#fffe71', '#fffe7a', '#fffeb6', '#ffff14', '#ffff7e', '#ffff81', '#ffff84', '#ffffb6', '#ffffc2', '#ffffcb', '#ffffd4', '#ffffe4', '#ffffff', 'C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'acid green', 'adobe', 'algae', 'algae green', 'aliceblue', 'almost black', 'amber', 'amethyst', 'antiquewhite', 'apple', 'apple green', 'apricot', 'aqua', 'aqua blue', 'aqua green', 'aqua marine', 'aquamarine', 'army green', 'asparagus', 'aubergine', 'auburn', 'avocado', 'avocado green', 'azul', 'azure', 'b', 'baby blue', 'baby green', 'baby pink', 'baby poo', 'baby poop', 'baby poop green', 'baby puke green', 'baby purple', 'baby shit brown', 'baby shit green', 'banana', 'banana yellow', 'barbie pink', 'barf green', 'barney', 'barney purple', 'battleship grey', 'beige', 'berry', 'bile', 'bisque', 'black', 'blanchedalmond', 'bland', 'blood', 'blood orange', 'blood red', 'blue', 'blue blue', 'blue green', 'blue grey', 'blue purple', 'blue violet', 'blue with a hint of purple', 'blue/green', 'blue/grey', 'blue/purple', 'blueberry', 'bluegreen', 'bluegrey', 'blueviolet', 'bluey green', 'bluey grey', 'bluey purple', 'bluish', 'bluish green', 'bluish grey', 'bluish purple', 'blurple', 'blush', 'blush pink', 'booger', 'booger green', 'bordeaux', 'boring green', 'bottle green', 'brick', 'brick orange', 'brick red', 'bright aqua', 'bright blue', 'bright cyan', 'bright green', 'bright lavender', 'bright light blue', 'bright light green', 'bright lilac', 'bright lime', 'bright lime green', 'bright magenta', 'bright olive', 'bright orange', 'bright pink', 'bright purple', 'bright red', 'bright sea green', 'bright sky blue', 'bright teal', 'bright turquoise', 'bright violet', 'bright yellow', 'bright yellow green', 'british racing green', 'bronze', 'brown', 'brown green', 'brown grey', 'brown orange', 'brown red', 'brown yellow', 'brownish', 'brownish green', 'brownish grey', 'brownish orange', 'brownish pink', 'brownish purple', 'brownish red', 'brownish yellow', 'browny green', 'browny orange', 'bruise', 'bubble gum pink', 'bubblegum', 'bubblegum pink', 'buff', 'burgundy', 'burlywood', 'burnt orange', 'burnt red', 'burnt siena', 'burnt sienna', 'burnt umber', 'burnt yellow', 'burple', 'butter', 'butter yellow', 'butterscotch', 'c', 'cadet blue', 'cadetblue', 'camel', 'camo', 'camo green', 'camouflage green', 'canary', 'canary yellow', 'candy pink', 'caramel', 'carmine', 'carnation', 'carnation pink', 'carolina blue', 'celadon', 'celery', 'cement', 'cerise', 'cerulean', 'cerulean blue', 'charcoal', 'charcoal grey', 'chartreuse', 'cherry', 'cherry red', 'chestnut', 'chocolate', 'chocolate brown', 'cinnamon', 'claret', 'clay', 'clay brown', 'clear blue', 'cloudy blue', 'cobalt', 'cobalt blue', 'cocoa', 'coffee', 'cool blue', 'cool green', 'cool grey', 'copper', 'coral', 'coral pink', 'cornflower', 'cornflower blue', 'cornflowerblue', 'cornsilk', 'cranberry', 'cream', 'creme', 'crimson', 'custard', 'cyan', 'dandelion', 'dark', 'dark aqua', 'dark aquamarine', 'dark beige', 'dark blue', 'dark blue green', 'dark blue grey', 'dark brown', 'dark coral', 'dark cream', 'dark cyan', 'dark forest green', 'dark fuchsia', 'dark gold', 'dark grass green', 'dark green', 'dark green blue', 'dark grey', 'dark grey blue', 'dark hot pink', 'dark indigo', 'dark khaki', 'dark lavender', 'dark lilac', 'dark lime', 'dark lime green', 'dark magenta', 'dark maroon', 'dark mauve', 'dark mint', 'dark mint green', 'dark mustard', 'dark navy', 'dark navy blue', 'dark olive', 'dark olive green', 'dark orange', 'dark pastel green', 'dark peach', 'dark periwinkle', 'dark pink', 'dark plum', 'dark purple', 'dark red', 'dark rose', 'dark royal blue', 'dark sage', 'dark salmon', 'dark sand', 'dark sea green', 'dark seafoam', 'dark seafoam green', 'dark sky blue', 'dark slate blue', 'dark tan', 'dark taupe', 'dark teal', 'dark turquoise', 'dark violet', 'dark yellow', 'dark yellow green', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkish blue', 'darkish green', 'darkish pink', 'darkish purple', 'darkish red', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deep aqua', 'deep blue', 'deep brown', 'deep green', 'deep lavender', 'deep lilac', 'deep magenta', 'deep orange', 'deep pink', 'deep purple', 'deep red', 'deep rose', 'deep sea blue', 'deep sky blue', 'deep teal', 'deep turquoise', 'deep violet', 'deeppink', 'deepskyblue', 'denim', 'denim blue', 'desert', 'diarrhea', 'dimgray', 'dimgrey', 'dirt', 'dirt brown', 'dirty blue', 'dirty green', 'dirty orange', 'dirty pink', 'dirty purple', 'dirty yellow', 'dodger blue', 'dodgerblue', 'drab', 'drab green', 'dried blood', 'duck egg blue', 'dull blue', 'dull brown', 'dull green', 'dull orange', 'dull pink', 'dull purple', 'dull red', 'dull teal', 'dull yellow', 'dusk', 'dusk blue', 'dusky blue', 'dusky pink', 'dusky purple', 'dusky rose', 'dust', 'dusty blue', 'dusty green', 'dusty lavender', 'dusty orange', 'dusty pink', 'dusty purple', 'dusty red', 'dusty rose', 'dusty teal', 'earth', 'easter green', 'easter purple', 'ecru', 'egg shell', 'eggplant', 'eggplant purple', 'eggshell', 'eggshell blue', 'electric blue', 'electric green', 'electric lime', 'electric pink', 'electric purple', 'emerald', 'emerald green', 'evergreen', 'faded blue', 'faded green', 'faded orange', 'faded pink', 'faded purple', 'faded red', 'faded yellow', 'fawn', 'fern', 'fern green', 'fire engine red', 'firebrick', 'flat blue', 'flat green', 'floralwhite', 'fluorescent green', 'fluro green', 'foam green', 'forest', 'forest green', 'forestgreen', 'forrest green', 'french blue', 'fresh green', 'frog green', 'fuchsia', 'g', 'gainsboro', 'ghostwhite', 'gold', 'golden', 'golden brown', 'golden rod', 'golden yellow', 'goldenrod', 'grape', 'grape purple', 'grapefruit', 'grass', 'grass green', 'grassy green', 'gray', 'green', 'green apple', 'green blue', 'green brown', 'green grey', 'green teal', 'green yellow', 'green/blue', 'green/yellow', 'greenblue', 'greenish', 'greenish beige', 'greenish blue', 'greenish brown', 'greenish cyan', 'greenish grey', 'greenish tan', 'greenish teal', 'greenish turquoise', 'greenish yellow', 'greeny blue', 'greeny brown', 'greeny grey', 'greeny yellow', 'greenyellow', 'grey', 'grey blue', 'grey brown', 'grey green', 'grey pink', 'grey purple', 'grey teal', 'grey/blue', 'grey/green', 'greyblue', 'greyish', 'greyish blue', 'greyish brown', 'greyish green', 'greyish pink', 'greyish purple', 'greyish teal', 'gross green', 'gunmetal', 'hazel', 'heather', 'heliotrope', 'highlighter green', 'honeydew', 'hospital green', 'hot green', 'hot magenta', 'hot pink', 'hot purple', 'hotpink', 'hunter green', 'ice', 'ice blue', 'icky green', 'indian red', 'indianred', 'indigo', 'indigo blue', 'iris', 'irish green', 'ivory', 'jade', 'jade green', 'jungle green', 'k', 'kelley green', 'kelly green', 'kermit green', 'key lime', 'khaki', 'khaki green', 'kiwi', 'kiwi green', 'lavender', 'lavender blue', 'lavender pink', 'lavenderblush', 'lawn green', 'lawngreen', 'leaf', 'leaf green', 'leafy green', 'leather', 'lemon', 'lemon green', 'lemon lime', 'lemon yellow', 'lemonchiffon', 'lichen', 'light aqua', 'light aquamarine', 'light beige', 'light blue', 'light blue green', 'light blue grey', 'light bluish green', 'light bright green', 'light brown', 'light burgundy', 'light cyan', 'light eggplant', 'light forest green', 'light gold', 'light grass green', 'light green', 'light green blue', 'light greenish blue', 'light grey', 'light grey blue', 'light grey green', 'light indigo', 'light khaki', 'light lavendar', 'light lavender', 'light light blue', 'light light green', 'light lilac', 'light lime', 'light lime green', 'light magenta', 'light maroon', 'light mauve', 'light mint', 'light mint green', 'light moss green', 'light mustard', 'light navy', 'light navy blue', 'light neon green', 'light olive', 'light olive green', 'light orange', 'light pastel green', 'light pea green', 'light peach', 'light periwinkle', 'light pink', 'light plum', 'light purple', 'light red', 'light rose', 'light royal blue', 'light sage', 'light salmon', 'light sea green', 'light seafoam', 'light seafoam green', 'light sky blue', 'light tan', 'light teal', 'light turquoise', 'light urple', 'light violet', 'light yellow', 'light yellow green', 'light yellowish green', 'lightblue', 'lightcoral', 'lightcyan', 'lighter green', 'lighter purple', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightish blue', 'lightish green', 'lightish purple', 'lightish red', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'lilac', 'liliac', 'lime', 'lime green', 'lime yellow', 'limegreen', 'linen', 'lipstick', 'lipstick red', 'm', 'macaroni and cheese', 'magenta', 'mahogany', 'maize', 'mango', 'manilla', 'marigold', 'marine', 'marine blue', 'maroon', 'mauve', 'medium blue', 'medium brown', 'medium green', 'medium grey', 'medium pink', 'medium purple', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'melon', 'merlot', 'metallic blue', 'mid blue', 'mid green', 'midnight', 'midnight blue', 'midnight purple', 'midnightblue', 'military green', 'milk chocolate', 'mint', 'mint green', 'mintcream', 'minty green', 'mistyrose', 'moccasin', 'mocha', 'moss', 'moss green', 'mossy green', 'mud', 'mud brown', 'mud green', 'muddy brown', 'muddy green', 'muddy yellow', 'mulberry', 'murky green', 'mushroom', 'mustard', 'mustard brown', 'mustard green', 'mustard yellow', 'muted blue', 'muted green', 'muted pink', 'muted purple', 'nasty green', 'navajowhite', 'navy', 'navy blue', 'navy green', 'neon blue', 'neon green', 'neon pink', 'neon purple', 'neon red', 'neon yellow', 'nice blue', 'night blue', 'ocean', 'ocean blue', 'ocean green', 'ocher', 'ochre', 'ocre', 'off blue', 'off green', 'off white', 'off yellow', 'old pink', 'old rose', 'oldlace', 'olive', 'olive brown', 'olive drab', 'olive green', 'olive yellow', 'olivedrab', 'orange', 'orange brown', 'orange pink', 'orange red', 'orange yellow', 'orangeish', 'orangered', 'orangey brown', 'orangey red', 'orangey yellow', 'orangish', 'orangish brown', 'orangish red', 'orchid', 'pale', 'pale aqua', 'pale blue', 'pale brown', 'pale cyan', 'pale gold', 'pale green', 'pale grey', 'pale lavender', 'pale light green', 'pale lilac', 'pale lime', 'pale lime green', 'pale magenta', 'pale mauve', 'pale olive', 'pale olive green', 'pale orange', 'pale peach', 'pale pink', 'pale purple', 'pale red', 'pale rose', 'pale salmon', 'pale sky blue', 'pale teal', 'pale turquoise', 'pale violet', 'pale yellow', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'parchment', 'pastel blue', 'pastel green', 'pastel orange', 'pastel pink', 'pastel purple', 'pastel red', 'pastel yellow', 'pea', 'pea green', 'pea soup', 'pea soup green', 'peach', 'peachpuff', 'peachy pink', 'peacock blue', 'pear', 'periwinkle', 'periwinkle blue', 'perrywinkle', 'peru', 'petrol', 'pig pink', 'pine', 'pine green', 'pink', 'pink purple', 'pink red', 'pink/purple', 'pinkish', 'pinkish brown', 'pinkish grey', 'pinkish orange', 'pinkish purple', 'pinkish red', 'pinkish tan', 'pinky', 'pinky purple', 'pinky red', 'piss yellow', 'pistachio', 'plum', 'plum purple', 'poison green', 'poo', 'poo brown', 'poop', 'poop brown', 'poop green', 'powder blue', 'powder pink', 'powderblue', 'primary blue', 'prussian blue', 'puce', 'puke', 'puke brown', 'puke green', 'puke yellow', 'pumpkin', 'pumpkin orange', 'pure blue', 'purple', 'purple blue', 'purple brown', 'purple grey', 'purple pink', 'purple red', 'purple/blue', 'purple/pink', 'purpleish', 'purpleish blue', 'purpleish pink', 'purpley', 'purpley blue', 'purpley grey', 'purpley pink', 'purplish', 'purplish blue', 'purplish brown', 'purplish grey', 'purplish pink', 'purplish red', 'purply', 'purply blue', 'purply pink', 'putty', 'r', 'racing green', 'radioactive green', 'raspberry', 'raw sienna', 'raw umber', 'really light blue', 'rebeccapurple', 'red', 'red brown', 'red orange', 'red pink', 'red purple', 'red violet', 'red wine', 'reddish', 'reddish brown', 'reddish grey', 'reddish orange', 'reddish pink', 'reddish purple', 'reddy brown', 'rich blue', 'rich purple', 'robin egg blue', "robin's egg", "robin's egg blue", 'rosa', 'rose', 'rose pink', 'rose red', 'rosy pink', 'rosybrown', 'rouge', 'royal', 'royal blue', 'royal purple', 'royalblue', 'ruby', 'russet', 'rust', 'rust brown', 'rust orange', 'rust red', 'rusty orange', 'rusty red', 'saddlebrown', 'saffron', 'sage', 'sage green', 'salmon', 'salmon pink', 'sand', 'sand brown', 'sand yellow', 'sandstone', 'sandy', 'sandy brown', 'sandy yellow', 'sandybrown', 'sap green', 'sapphire', 'scarlet', 'sea', 'sea blue', 'sea green', 'seafoam', 'seafoam blue', 'seafoam green', 'seagreen', 'seashell', 'seaweed', 'seaweed green', 'sepia', 'shamrock', 'shamrock green', 'shit', 'shit brown', 'shit green', 'shocking pink', 'sick green', 'sickly green', 'sickly yellow', 'sienna', 'silver', 'sky', 'sky blue', 'skyblue', 'slate', 'slate blue', 'slate green', 'slate grey', 'slateblue', 'slategray', 'slategrey', 'slime green', 'snot', 'snot green', 'snow', 'soft blue', 'soft green', 'soft pink', 'soft purple', 'spearmint', 'spring green', 'springgreen', 'spruce', 'squash', 'steel', 'steel blue', 'steel grey', 'steelblue', 'stone', 'stormy blue', 'straw', 'strawberry', 'strong blue', 'strong pink', 'sun yellow', 'sunflower', 'sunflower yellow', 'sunny yellow', 'sunshine yellow', 'swamp', 'swamp green', 'tab:', 'tan', 'tan brown', 'tan green', 'tangerine', 'taupe', 'tea', 'tea green', 'teal', 'teal blue', 'teal green', 'tealish', 'tealish green', 'terra cotta', 'terracota', 'terracotta', 'thistle', 'tiffany blue', 'tomato', 'tomato red', 'topaz', 'toupe', 'toxic green', 'tree green', 'true blue', 'true green', 'turquoise', 'turquoise blue', 'turquoise green', 'turtle green', 'twilight', 'twilight blue', 'ugly blue', 'ugly brown', 'ugly green', 'ugly pink', 'ugly purple', 'ugly yellow', 'ultramarine', 'ultramarine blue', 'umber', 'velvet', 'vermillion', 'very dark blue', 'very dark brown', 'very dark green', 'very dark purple', 'very light blue', 'very light brown', 'very light green', 'very light pink', 'very light purple', 'very pale blue', 'very pale green', 'vibrant blue', 'vibrant green', 'vibrant purple', 'violet', 'violet blue', 'violet pink', 'violet red', 'viridian', 'vivid blue', 'vivid green', 'vivid purple', 'vomit', 'vomit green', 'vomit yellow', 'w', 'warm blue', 'warm brown', 'warm grey', 'warm pink', 'warm purple', 'washed out green', 'water blue', 'watermelon', 'weird green', 'wheat', 'white', 'whitesmoke', 'windows blue', 'wine', 'wine red', 'wintergreen', 'wisteria', 'xkcd:', 'y', 'yellow', 'yellow brown', 'yellow green', 'yellow ochre', 'yellow orange', 'yellow tan', 'yellow/green', 'yellowgreen', 'yellowish', 'yellowish brown', 'yellowish green', 'yellowish orange', 'yellowish tan', 'yellowy brown', 'yellowy green'],
    'napari/utils/colormaps/vendored/_cm_listed.py': ['_r', 'cividis', 'inferno', 'magma', 'plasma', 'turbo', 'twilight', 'twilight_shifted', 'viridis'],
    'napari/utils/colormaps/vendored/colors.py': ['', '"blend_mode" must be callable or one of {}', '#', '02x', 'Abstract class only', 'BoundaryNorm is not invertible', 'Invalid RGBA argument: {!r}', 'Last dimension of input array must be 3; shape {shp} was found.', 'Last dimension of input array must be 3; shape {} was found.', 'Not invertible until scaled', 'RGBA sequence should have length 3 or 4', 'RGBA values should be within 0-1 range', 'Unexpected value for extend: {0!r}', 'With extend == {0!r} and n_levels == {1!r} expected n_colors == {2!r}. Got {3!r}.', '\\A#[a-fA-F0-9]{6}\\Z', '\\A#[a-fA-F0-9]{8}\\Z', '_r', 'alpha', 'array', 'blue', 'both', 'clip', 'colors must be iterable', 'data mapping points must have x in increasing order', 'data mapping points must start with x=0 and end with x=1', 'data must be convertible to an array', 'data must be nx3 format', 'f', 'from_list', 'gray', 'green', 'grey', 'hsv', 'if', 'ignore', 'k', 'mask', 'max', 'min', 'minvalue must be less than or equal to maxvalue', 'neither', 'none', 'overlay', 'red', 'same_kind', 'scalar', 'soft', 'values must all be positive'],
    'napari/utils/colormaps/colormap.py': ['Unrecognized Colormap Interpolation Mode', 'colors', 'controls', 'custom', 'interpolation', 'linear', 'zero'],
    'napari/utils/colormaps/categorical_colormap.py': ['colormap', 'colormap should be an array or dict', 'fallback_color', 'white'],
    'napari/utils/colormaps/standardize_color.py': ['\nA proper color array should have 3-4 columns with a row per data entry.', ' at index ', ' columns. Converting input to a white color array.', ' dimensions.', '#', '#00000000', '%02x', ') not supported.', '.', 'An object array was passed as the color input. Please convert its datatype before sending it to napari. Converting input to a white color array.', 'Colors input had negative values.', "Colors with values larger than one detected. napari will normalize these colors for you. If you'd like to convert these yourself, please use the proper method from skimage.color.", "Coudln't convert input color array to a proper numpy array. Please make sure that your input data is in a parsable format. Converting input to a white color array.", 'Data type of array (', 'Empty string detected. Returning black instead.', 'Given color array has an unsupported format. Received the following array:\n', 'Given color input is empty. Converting input to a white color array.', 'Given colors input should contain one or two dimensions. Received array with ', 'Given colors input should contain three or four columns. Received array with ', 'Invalid color found: ', 'O', 'String color arrays should be one-dimensional. Converting input to a white color array.', 'U', 'Value must have second dimension of size 3 or 4', 'f', 'ff', 'i', 'transparent', 'u', '|U9'],
    'napari/utils/colormaps/categorical_colormap_utils.py': ['ColorCycle requires a values argument', 'color_cycle', 'cycle', 'values', 'white'],
    'napari/utils/colormaps/colormap_utils.py': ['" not found in either vispy or matplotlib.', '. Must be a {str, tuple, dict, napari.utils.Colormap, vispy.colors.Colormap}', 'Colormap "', 'Colormap must be a vispy colormap if passed to from_vispy', 'Received an empty dict as a colormap argument.', 'When providing a dict as a colormap, all values must be Colormap instances', 'When providing a tuple as a colormap argument, the first element must be a string and the second a Colormap instance', '[unnamed colormap ', '[unnamed colormap]', ']', '_controls', 'blue', 'colors', 'cyan', 'green', 'ij', 'interpolation', 'invalid type for colormap: ', 'lab', 'label_colormap', 'linear', 'luv', 'magenta', 'matplotlib_cmaps.txt', 'only the first item in a colormap dict is used as an argument', 'red', 'rgb', 'vispy', 'yellow', 'zero'],
    'napari/utils/colormaps/colorbars.py': ['C'],
    'napari/utils/colormaps/__init__.py': [],
    'napari/utils/colormaps/bop_colors.py': ['bop blue', 'bop orange', 'bop purple'],
    'napari/utils/temporary_file.py': [''],
    'napari/utils/_register.py': ['\n\tThe newly-created ', '\n\nParameters\n----------\n', '\n\nReturns\n-------\n', ' ', ' layer to the layer list. ', ' layer.', " should not include 'layer'", 'Add a', '`', 'add_', 'aeiou', "def {name}{signature}:\n    kwargs = locals()\n    kwargs.pop('self', None)\n    layer = {cls_name}(**kwargs)\n    self.layers.append(layer)\n    return layer\n", 'layer', 'layer : :class:`napari.layers.', 'n', 'name ', 'self'],
    'napari/utils/_base.py': ['Napari', 'en', 'settings.yaml'],
    'napari/utils/misc.py': ['', ' \\1', ' is not a directory.', ' may only be called with a `str` or an instance of ', ' must equal ', '((?<=[a-z])[A-Z]|(?<!\\A)[A-R,T-Z](?=[a-z]))', '(.)([A-Z][a-z]+)', '*', '**', '.', '. Got ', '=', 'Argument must be a string, PathLike, or sequence thereof', 'Briefcase-Version', 'Not a valid layer data tuple: ', 'Not a valid list of layer data tuples!', 'T', 'TerminalInteractiveShell', 'ZMQInteractiveShell', '\\1_\\2', '__main__', 'app_packages', 'bin', 'dask.Array', 'length of ', 'n must be greater than 0', 'numpy.ndarray', 'packaging.version._BaseVersion', 'rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)', 'xarray.DataArray', 'zarr.Array'],
    'napari/utils/key_bindings.py': [" already used! specify 'overwrite=True' to bypass this check", ' to be callable', "'func' must be a callable", '-', '-(?=.+)', 'Control', 'Down', 'Left', 'Right', 'Shift', 'Up', 'class_keymap', 'expected ', 'invalid key ', 'invalid modifier key ', 'key combination '],
    'napari/utils/config.py': ['\nExperimental Features\n\nAsync Loading\n-------------\nImage layers will use the ChunkLoader to load data instead of loading\nthe data directly. Image layers will not call np.asarray() in the GUI\nthread. The ChunkLoader will call np.asarray() in a worker thread. That\nmeans any IO or computation done as part of the load will not block the\nGUI thread.\n\nSet NAPARI_ASYNC=1 to turn on async loading with default settings.\n\nOctree Rendering\n----------------\nImage layers use an octree for rendering. The octree organizes the image\ninto chunks/tiles. Only a subset of those chunks/tiles are loaded and\ndrawn at a time. Octree rendering is a work in progress.\n\nEnabled one of two ways:\n\n1) Set NAPARI_OCTREE=1 to enabled octree rendering with defaults.\n\n2) Set NAPARI_OCTREE=/tmp/config.json use a config file.\n\nSee napari/utils/_octree.py for the config file format.\n\nShared Memory Server\n--------------------\nExperimental shared memory service. Only enabled if NAPARI_MON is set to\nthe path of a config file. See this PR for more info:\nhttps://github.com/napari/napari/pull/1909.\n', '\nOther Config Options\n', '0', 'NAPARI_MON', 'enabled', 'octree'],
    'napari/utils/theme.py': [' ', '([vh])gradient\\((.+)\\)', ')', ', ', '-', '.', '. Availabe themes are ', 'Unrecognized theme ', 'background', 'black', 'canvas', 'console', 'current', 'dark', 'default', 'folder', 'foreground', 'h', 'highlight', 'icon', 'light', 'native', 'palette is deprecated and will be removed after version 0.4.6. Please use get_theme and register_theme instead', 'palettes', 'primary', 'qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, ', 'qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, ', 'rgb(', 'rgb(0, 0, 0)', 'rgb(0, 122, 204)', 'rgb(106, 115, 128)', 'rgb(107, 105, 103)', 'rgb(134, 142, 147)', 'rgb(150, 146, 144)', 'rgb(153, 18, 31)', 'rgb(163, 158, 156)', 'rgb(188, 184, 181)', 'rgb(209, 210, 212)', 'rgb(214, 208, 206)', 'rgb(239, 235, 233)', 'rgb(240, 241, 242)', 'rgb(253, 240, 148)', 'rgb(255, 18, 31)', 'rgb(255, 255, 255)', 'rgb(38, 41, 48)', 'rgb(59, 58, 57)', 'rgb(65, 72, 81)', 'rgb(90, 98, 108)', 'rgba(', 'secondary', 'stop: ', 'syntax_style', 'text', 'warning', 'white', '{{ %s }}', '{{\\s?darken\\((\\w+),?\\s?([-\\d]+)?\\)\\s?}}', '{{\\s?lighten\\((\\w+),?\\s?([-\\d]+)?\\)\\s?}}', '{{\\s?opacity\\((\\w+),?\\s?([-\\d]+)?\\)\\s?}}'],
    'napari/utils/naming.py': [' ', '((?<=\\A\\[)|(?<=\\s\\[))(?:\\d+|)(?=\\]$)|$', '<string>', '[', ']'],
    'napari/utils/_testsupport.py': ['--show-napari-viewer', 'CanvasBackendDesktop', 'Widgets leaked!: ', "don't show viewer during tests", 'function', 'last_value', 'show', 'store_true'],
    'napari/utils/notebook_display.py': ['nbscreenshot', 'png'],
    'napari/utils/validators.py': [' is of type ', "' is not an indexable collection (list, tuple, or np.array), of length ", ', but ', ', got ', 'Every item in the sequence must be of type ', 'Function that validates whether an object is a sequence of len `n`.\n\n        Parameters\n        ----------\n        obj : any\n            the object to be validated\n\n        Raises\n        ------\n        TypeError\n            If the object is not an indexable collection.\n        ValueError\n            If the object does not have length `n`\n        TypeError\n            If `dtype` was provided to the wrapper function and all items in\n            the sequence are not of type `dtype`.\n        ', '__getitem__', "object '", 'object must have length '],
    'napari/utils/io.py': ['', ' after removing subdirectories', ' data', '"', '" not recognized as ', '" not recognized as valid Layer data', '([0-9]+)', '*.*', ',', '.', '.bmp', '.bsdf', '.bw', '.eps', '.gif', '.icns', '.ico', '.im', '.j2c', '.j2k', '.jfif', '.jp2', '.jpc', '.jpe', '.jpeg', '.jpf', '.jpg', '.jpx', '.lsm', '.mpo', '.npz', '.pbm', '.pcx', '.pgm', '.png', '.ppm', '.ps', '.rgb', '.rgba', '.sgi', '.stk', '.tga', '.tif', '.tiff', '.zarr', '.zarray', '.zgroup', 'Expected number of shapes not found', 'File "', 'No files found in ', 'Not a zarr dataset or group: ', 'To stack multiple files into a single array with numpy, all input arrays must have the same shape. Set `use_dask` to True to stack arrays with different shapes.', 'any', 'axis-', 'axis-0', 'axis-1', 'float', 'index', 'input arrays must have the same shape', 'int', 'points', 'properties', 'shape-type', 'shape_type', 'shapes', 'vertex-index', 'w'],
    'napari/utils/translations.py': ['!', '.UTF-8', 'LANG', 'LANGUAGE', 'NAPARI_LANGUAGE', 'Requested locale not available: {locale}', 'The `language` setting defined in the napari configuration file could not be read. The default language will be used.\n\nError: \n', 'The following locales are invalid: ', '_', 'application', 'displayName', 'language', 'locale', 'napari', 'napari.languagepack', 'nativeName'],
    'napari/utils/__init__.py': [],
    'napari/utils/_tracebacks.py': ['\x1b\\[([\\d;]*)([a-zA-z])', ' ', '&nbsp;', '(<tr><td><small.*</tr>)', ': ', ';', '</span>', '<br>\n', '<br><br><font color="#51B432">During handling of the above exception, another exception occurred:</font><br>', '<br><br><font color="#51B432">The above exception was the direct cause of the following exception:</font><br>', '<br>\\1<br>', '<p>A problem occurred in a Python script.  Here is the sequence of', '<span style="%s">', "<span style='font-family: monaco,courier,monospace;'>", 'Format exception with cgitb.html.', 'Neutral', 'Recurse through exception stack and chain cgitb_html calls.', 'bgcolor="#.*"', 'black', 'blink', 'blue', 'bold', 'color', 'cyan', 'face="helvetica, arial"', 'font_weight', 'function calls leading up to the error, in the order they occurred.</p>', 'green', 'hidden', 'italic', 'lighter', 'line-through', 'mM', 'magenta', 'red', 'text_decoration', 'underline', 'visibility', 'white', 'yellow'],
    'napari/utils/_octree.py': ['0', '1', 'NAPARI_ASYNC', 'NAPARI_ASYNC can only be "0" or "1"', 'NAPARI_OCTREE', 'auto_sync_ms', 'delay_queue_ms', 'enabled', 'force_synchronous', 'loader_defaults', 'loaders', 'log_path', 'napari.loader', 'num_workers', 'octree', 'tile_size', 'use_processes'],
    'napari/utils/_appdirs.py': ['.', 'Lib', 'darwin', 'lib', 'napari', 'nt', 'plugins', 'python', 'site-packages'],
    'napari/utils/mouse_bindings.py': [],
    'napari/utils/notifications.py': ['', '!', '1', ': ', 'Closed by KeyboardInterrupt', 'Exit on error', 'INFO', 'NAPARI_EXIT_ON_ERROR', 'Notification', 'True', 'actions', 'debug', 'error', 'info', 'message', 'none', 'warning', 'ⓘ', 'ⓧ', '⚠️', '🐛'],
    'napari/utils/_magicgui.py': ['', ' (data)', ' annotated with a return type of napari.types.LayerDataTuple did not return LayerData tuple(s)', 'CategoricalWidget', 'Data', 'add_', 'magicgui function ', 'name', 'native', 'parent', 'qt_viewer'],
    'napari/utils/interactions.py': ['', "'><b>", '+', '-', '.', '</b></span>', "</span></td><td style='text-align: left; padding: 4px; color: #CCC;'>", '</table>', '</td></tr>', "<span style='color: ", '<table border="0" width="100%">', "<tr><td width='80' style='text-align: right; padding: 4px;'><span style='color: rgb(66, 72, 80)'>", 'Alt', 'Backspace', 'Control', 'Ctrl', 'Down', 'Enter', 'Esc', 'Escape', 'Left', 'Meta', 'Opt', 'Option', 'Return', 'Right', 'Shift', 'Summary', 'Super', 'Tab', 'Up', '__wrapped__', 'cannot set attribute ', 'cannot set item ', 'darwin', 'linux', 'rgb(134, 142, 147)', '←', '↑', '→', '↓', '↵', '↹', '⇧', '⊞', '⌃', '⌘', '⌥', '⌫', '⏎'],
    'napari/utils/info.py': [' ', '  - ', '  - failed to load screen information ', '  - failed to load vispy', '  - screen ', '  None', ' (no version)', '"', "'", ')<br>', ', scale ', '-d', '-productVersion', '-r', '/etc/os-release', ': ', ': resolution ', '</b>', '</b>: ', '</b>: Import failed (', '<b>', '<b>Python</b>: ', '<b>Qt</b>: ', '<b>Qt</b>: Import failed (', '<b>System</b>: ', '<b>napari</b>: ', '<br>', '<br>  - ', '<br><b>', '<br><b>OpenGL:</b><br>', '<br><b>Platform</b>: ', '<br><b>Plugins</b>:', '<br><b>Screens:</b><br>', '=', 'Dask', 'Description', 'MacOS ', 'NAME', 'NumPy', 'PRETTY_NAME', 'PyQt5', 'PySide2', 'Release', 'SciPy', 'VERSION', 'VERSION_ID', 'VisPy', 'builtins', 'c', 'darwin', 'dask', 'linux', 'lsb_release', 'napari contributors (2019). napari: a multi-dimensional image viewer for python. doi:10.5281/zenodo.3555620', 'numpy', 'plugin_name', 'scipy', 'sw_vers', 'version', 'vispy', 'x'],
    'napari/utils/dask_utils.py': ['2.15.0', 'For best performance with Dask arrays in napari, please upgrade Dask to v2.15.0 or later. Current version is ', 'dask_cache', 'optimization.fuse.active'],
    'napari/utils/status_messages.py': [' ', ', ', '0.3g', ': ', '[', ']'],

    'napari/resources/_icons.py': ['(<svg[^>]*>)', '. Known names: ', '.svg', '</svg>', '<style type="text/css">\npath {{fill: {0}; opacity: {1};}}\npolygon {{fill: {0}; opacity: {1};}}\ncircle {{fill: {0}; opacity: {1};}}\nrect {{fill: {0}; opacity: {1};}}\n</style>', 'Could not detect svg tag in ', '\\1', 'icons', 'unrecognized icon name: '],
    'napari/resources/__init__.py': ['ICONS', 'ICON_PATH', 'Moved to module napari._qt.qt_resources. Will be removed after version 0.4.6.', 'get_colorized_svg', 'get_icon_path'],

    'napari/qt/__init__.py': ['QtNDisplayButton', 'QtStateButton', 'QtViewer', 'QtViewerButtons', 'Window', 'compile_qt_svgs', 'create_worker', 'get_app', 'get_stylesheet', 'ndisplay', 'ndisplay_button', 'run', 'thread_worker'],
    'napari/qt/threading.py': ['FunctionWorker', 'GeneratorWorker', 'GeneratorWorkerSignals', 'WorkerBase', 'WorkerBaseSignals', 'active_thread_count', 'create_worker', 'set_max_thread_count', 'thread_worker'],

    'napari/plugins/io.py': [' ', ' does not support file ', ' layers to ', ' of writing this combination of layer types: ', '" is not capable', "'.\nNames of plugins offering readers are: ", "'.\nNames of plugins offering writers are: ", "'.\nPlugins capable of writing layer._type_string layersare: ", '(', ') error', ', ', ', ...] as stack', '.', 'No data written! There may be no plugins capable of writing these ', 'No plugin found capable of reading ', 'Plugin ', 'Requested plugin "', 'See full error logs in "Plugins → Plugin Errors..."', "There is no registered plugin named '", 'Unable to find plugin capable', '[', 'napari_write_', 'occurred in plugins: ', 's'],
    'napari/plugins/__init__.py': [' ', ' To provide multiple function widgets please use a LIST of callables', ' does not provide a widget named ', ' does not provide any dock widgets', ' for class ', ' in the dict returned by ', ' provided a non-callable object (widget) to ', ' provided a non-callable type to ', ' provided a non-dict object to ', ' provided an invalid dict object for key ', ' provided an invalid tuple to ', ' provided invalid data for key ', ' provided invalid kwargs to ', ' provides more than 1 dock_widget. Must also provide "widget_name" from ', ' that does not have required keys: "data" and "display_name".  Ignoring', ').', ', plugin ', '.  Skipping', '. (Must be str, callable, or dict), got (', '. Function widget ignored.', '. Widget ignored.', ': ', ': data ignored.', 'FunctionGui', 'In ', 'Plugin ', "Plugin '{}' has already registered a dock widget '{}' which has now been overwritten", "Plugin '{}' has already registered a function widget '{}' which has now been overwritten", 'PluginManager', 'QWidget', '_', '`napari_experimental_provide_dock_widget`', '`napari_experimental_provide_function`', 'available_samples', 'builtins', 'data', 'display_name', 'dock_widgets', 'function_widgets', 'linux', 'menu_item_template', 'name', 'napari', 'napari.plugin', 'napari_provide_sample_data', 'plugin_manager', 'scikit-image', 'skimage', '{}: {}'],
    'napari/plugins/_skimage_data.py': ['WGA', 'actin', 'astronaut', 'binary_blobs', 'binary_blobs_3D', 'blue', 'brain', 'brick', 'camera', 'cat', 'cell', 'cells3d', 'channel_axis', 'checkerboard', 'clock', 'coffee', 'coins', 'colormap', 'colorwheel', 'contrast_limits', 'data', 'display_name', 'eagle', 'grass', 'gravel', 'gray', 'green', 'horse', 'hubble_deep_field', 'human_mitosis', 'immunohistochemistry', 'kidney', 'length', 'lfw_subset', 'lily', 'lily-B', 'lily-G', 'lily-R', 'lily-W', 'membrane', 'microaneurysms', 'moon', 'n_dim', 'name', 'nuclei', 'page', 'red', 'retina', 'rocket', 'shepp_logan_phantom', 'skin', 'text', 'volume_fraction'],
    'napari/plugins/_builtins.py': ['', '.csv', '.tif', 'axis-', 'builtins', 'index', 'name', 'napari_write_', 'properties', 'rectangle', 'shape-type', 'shape_type', 'vertex-index'],
    'napari/plugins/hook_specifications.py': [],
    'napari/plugins/exceptions.py': [' ', ' >16', " Errors for plugin '", "' ", '-', ':  ', '<br>', '=', 'ERROR #', 'module', 'napari version', 'package', 'plugin package', 'version'],
    'napari/plugins/pypi.py': ['&page=', '-', '-(.+).tar', '.*)</a>', '/json', '<a href="/simple/(.+)">(', '>', 'Development Status :: ', 'Framework :: napari', 'UNKNOWN', '[-_.]+', 'author', 'class="package-snippet__name">(.+)</span>', 'classifiers', 'entry_points\\s?=\\s?([^}]*napari.plugin[^}]*)}', 'home_page', 'https://pypi.org/pypi/', 'https://pypi.org/search/?c=', 'https://pypi.org/simple/', 'info', 'license', 'name', 'napari-plugin-engine', 'setup\\s?\\(.*name\\s?=\\s?[\'\\"]([^\'\\"]+)[\'\\"]', 'summary', 'version'],

    'napari/layers/labels/labels.py': [' [No Properties]', ', ', ': ', 'Contours are not displayed during 3D rendering', 'black', 'circle', 'color', 'cross', 'data', 'index', 'multiscale', 'nearest', 'num_colors', 'properties', 'seed', 'square', 'standard', 'the number of items must be equal for all properties', 'translucent', 'transparent'],
    'napari/layers/labels/_labels_mouse_bindings.py': ['mouse_move'],
    'napari/layers/labels/__init__.py': [],
    'napari/layers/labels/_labels_key_bindings.py': ['Alt', 'Control', 'Control-Shift-Z', 'Control-Z', 'D', 'E', 'F', 'I', 'L', 'M', 'P', 'Shift', 'Space', 'Z'],
    'napari/layers/labels/_labels_utils.py': [],
    'napari/layers/labels/_labels_constants.py': ['backspace', 'darwin', 'delete'],
    'napari/layers/tracks/tracks.py': [' is not a valid property key', ' not available', ' not present in new properties. Falling back to track_id', 'Colormap ', 'Previous color_by key ', 'additive', 'color_by', 'colormap', 'colormaps_dict', 'constant', 'data', 'graph', 'properties', 'tail_length', 'tail_width', 'track_id', 'turbo'],
    'napari/layers/tracks/__init__.py': [],
    'napari/layers/tracks/_track_utils.py': [' not found', 'ID:', 'Property ', 'graph node ', 'the number of properties must equal the number of vertices', 'track id must be an integer', 'track timestamps must be greater than zero', 'track vertices should be 4 or 5-dimensional', 'track vertices should be a NxD array', 'track_id', 'tracks should be ordered by ID and time'],
    'napari/layers/surface/__init__.py': [],
    'napari/layers/surface/surface.py': ['.', 'Assigning multiple values per vertex after slicing is\n                    not allowed. All dimensions corresponding to vertex_values\n                    must be non-displayed dimensions. Data will not be\n                    visible.', 'Surface data tuple must be 2 or 3, specifyingverictes, faces, and optionally vertex values,instead got length ', 'colormap', 'contrast_limits', 'data', 'gamma', 'gray', 'int', 'translucent'],
    'napari/layers/shapes/_shapes_models/_polgyon_base.py': [' provided.', 'Shape needs at least two vertices,\n                 ', 'int', 'polygon'],
    'napari/layers/shapes/_shapes_models/line.py': [' provided.', 'Data shape does not match a line. A\n                             line expects two end vertices,\n                             ', 'int', 'line'],
    'napari/layers/shapes/_shapes_models/polygon.py': ['polygon'],
    'napari/layers/shapes/_shapes_models/__init__.py': [],
    'napari/layers/shapes/_shapes_models/rectangle.py': [' provided.', 'Data shape does not match a rectangle.\n                             Rectangle expects four corner vertices,\n                             ', 'int', 'rectangle'],
    'napari/layers/shapes/_shapes_models/shape.py': ['', '\n            got ', '.', 'Axis not recognized, must be one of "{0, 1}"\n                             ', 'int', 'mask shape length must either be 2 or the same\n            as the dimensionality of the shape, expected ', 'rectangle'],
    'napari/layers/shapes/_shapes_models/ellipse.py': [' provided.', 'Data shape does not match a ellipse.\n                             Ellipse expects four corner vertices,\n                             ', 'ellipse', 'int'],
    'napari/layers/shapes/_shapes_models/path.py': ['path'],
    'napari/layers/shapes/shapes.py': ['', 'There must be a valid Shapes.properties to use ', '_', '_color', '_color_cycle', '_color_cycle_map', '_color_cycle_values', '_color_mode', '_color_property', '_color_property was not set, setting to: ', '_colormap', '_contrast_limits', '_current_', 'black', 'cross', 'data', 'edge', 'edge_color', 'edge_color_cycle', 'edge_colormap', 'edge_contrast_limits', 'edge_width', 'expand_shape is deprecated and will be removed in version 0.4.9. It should no longer be used as layers should will soon not know which dimensions are displayed. Instead you should work with full nD shape data as much as possible.', 'face', 'face_color', 'face_color should be the name of a color, an array of colors, or the name of an property', 'face_color_cycle', 'face_colormap', 'face_contrast_limits', 'indices', 'int', 'n_text', 'ndim', 'opacity', 'pointing', 'properties', 'property used for edge_color dropped', 'property used for face_color dropped', 'rectangle', 'selected property must be numeric to use ColorMode.COLORMAP', 'shape_type', 'standard', 'text', 'the number of properties must equal the number of shapes', 'translucent', 'viridis', 'white', 'z_index'],
    'napari/layers/shapes/_shape_list.py': [' must be one of ', ', 4)', '_color', '_color must have shape (', 'edge', 'face', 'int', 'shape must be subclass of Shape', 'update_'],
    'napari/layers/shapes/_shapes_key_bindings.py': ['A', 'Backspace', 'Control-C', 'Control-V', 'D', 'E', 'Escape', 'I', 'L', 'P', 'R', 'S', 'Shift', 'Space', 'T', 'X', 'Z'],
    'napari/layers/shapes/_shapes_constants.py': ['backspace', 'darwin', 'delete'],
    'napari/layers/shapes/_shapes_mouse_bindings.py': ['Shift', 'ellipse', 'line', 'mouse_move', 'path', 'rectangle'],
    'napari/layers/shapes/__init__.py': [],
    'napari/layers/shapes/_mesh.py': ['edge', 'face'],
    'napari/layers/shapes/_shapes_utils.py': ['Data shape does not match expected `[4, D]`\n                         shape specifying corners for the ellipse', 'Data shape does not match expected `[4, D]`\n                         shape specifying corners for the rectangle', 'int'],
    'napari/layers/utils/color_manager_utils.py': ['categorical_colormap', 'color_properties', 'continuous_colormap', 'contrast_limits', 'current_color', 'face_color should be the name of a color, an array of colors, or the name of an property'],
    'napari/layers/utils/layer_utils.py': ['b', 'f', 'index', 'u', 'ui'],
    'napari/layers/utils/_color_manager_constants.py': ['colormap', 'cycle', 'direct'],
    'napari/layers/utils/_text_constants.py': [],
    'napari/layers/utils/_text_utils.py': ['', ')', ') should equal the length of the data (', ':', 'Number of text elements (', 'bottom', 'center', 'left', 'right', 'top', 'view_data should be a numpy array or list', 'view_data should be a numpy array or list when using Anchor.CENTER', '{', '{(.*?)}', '}'],
    'napari/layers/utils/__init__.py': [],
    'napari/layers/utils/text.py': ['', 'center', 'color', 'cyan', 'opaque blending mode is not allowed for text. setting to translucent.', 'rotation', 'size', 'text', 'translation', 'translucent', 'visible'],
    'napari/layers/utils/color_manager.py': ['categorical_colormap', 'color', 'color_mode', 'color_properties', 'color_properties dictionary should have keys: name, values, and optionally current_value', 'color_properties should be None, a dict, or ColorProperties object', 'colors', 'continuous_colormap', 'contrast_limits', 'current_color', 'current_value', 'if color_properties is a string, it should be a property name', 'n_colors', 'name', 'values', 'viridis', 'white'],
    'napari/layers/utils/stack_utils.py': [' layer ', ' values. ', "' argument only provided ", ') had length ', ", but the '", '.\nRequested channel_axis (', "Can't split along axis {}. The image has {} dimensions", 'Error adding multichannel image with data shape ', 'The image needs more than 2 dimensions for splitting', 'additive', 'affine', 'blending', 'colormap', 'contrast_limits', 'gray', 'image', 'images list is empty', 'metadata', 'multiscale', 'name', 'rgb', 'rotate', 'scale', 'shear', 'translate'],
    'napari/layers/utils/_link_layers.py': [' on ', ' to that of ', '. Allowable attrs include:\n', 'Cannot link attributes that are not shared by all layers: ', 'Layer', 'Must provide at least one layer to unlink', 'Set ', '_', '_on_layer_', '``layers`` iterable must have at least one layer', 'data', 'name', 'set_', 'status', 'thumbnail'],
    'napari/layers/utils/color_transformations.py': [' entries, while the data contains ', ' entries. Setting ', ' parameter contained illegal values, resetting all ', ' parameter has ', ' to ', ' values to ', ', while the number of colors is ', '.', '. Color for all points is reset to white.', 'The number of supplied colors mismatch the number of given data points. Length of data is ', 'The provided '],
    'napari/layers/vectors/vectors.py': ['', 'There must valid properties to use %s color mode', 'data', 'edge_color', 'edge_color should be the name of a color, an array of colors, or the name of an property', 'edge_color_cycle', 'edge_color_property was not set, setting to: %s', 'edge_colormap', 'edge_contrast_limits', 'edge_width', 'int', 'length', 'properties', 'property used for edge_color dropped', 'red', 'selected property must be numeric to use ColorMode.COLORMAP', 'the number of properties must equal the number of points', 'translucent', 'viridis', 'white'],
    'napari/layers/vectors/_vector_utils.py': ['Vector data of shape %s is not supported'],
    'napari/layers/vectors/__init__.py': [],
    'napari/layers/vectors/_vectors_constants.py': [],
    'napari/layers/image/experimental/_chunked_image_loader.py': ['ChunkedImageLoader.load', 'ChunkedImageLoader.match: accept %s', 'ChunkedImageLoader.match: reject %s', 'napari.loader'],
    'napari/layers/image/experimental/octree_tile_builder.py': ['Downsampling levels to a single tile...', 'Level %d downsampled %s in %.3fms', 'downsampling', 'napari.octree', 'nearest'],
    'napari/layers/image/experimental/_octree_loader.py': ['Cancel if we are no longer seeing this location.', '_cancel_load: Chunk did not exist %s', 'data', 'get_drawable_chunks: Starting with draw_set=%d ideal_chunks=%d', 'napari.loader.futures', 'napari.octree.loader'],
    'napari/layers/image/experimental/_chunk_set.py': [],
    'napari/layers/image/experimental/octree_chunk.py': ['%s has %d chunks at %s', '%s has %d chunks:', ') ', ', ', 'Chunk %d %s in_memory=%d loading=%d', 'location=(', 'napari.octree'],
    'napari/layers/image/experimental/__init__.py': [],
    'napari/layers/image/experimental/octree_util.py': ['octree', 'tile_size'],
    'napari/layers/image/experimental/octree_intersection.py': ['OctreeView', 'base_shape', 'corners', 'image_shape', 'level_index', 'seen', 'shape_in_tiles', 'tile_size'],
    'napari/layers/image/experimental/octree.py': [' base level', ' downscale=', ' is not in range(0, ', ' resulted no octree levels?', ' shape=', ')', ', expected 2.', 'Created %d additional levels in %.3fms', 'Data of shape ', 'Level ', 'Multiscale data has %d levels.', 'Multiscale data has downsampling ratio of ', 'Octree now has %d total levels:', '_create_extra_levels', 'napari.octree', 'size='],
    'napari/layers/image/experimental/octree_level.py': ['(', ') = ', ', ', 'Level %d: %s pixels -> %s tiles', 'napari.octree'],
    'napari/layers/image/experimental/_chunked_slice_data.py': ['Cancel any requests for this same data_id.\n\n            The must be requests for other slices, but we only ever show\n            one slice at a time, so they are stale.\n            ', 'image', 'napari.loader', 'thumbnail_slice', 'thumbnail_source'],
    'napari/layers/image/experimental/_octree_slice.py': [' is not in range(0, ', ')', 'Invalid octree level ', 'Octree level ', 'data', 'napari.octree.slice', 'on_chunk_loaded: adding %s', 'on_chunk_loaded: missing OctreeChunk: %s', 'on_chunk_loaded: wrong slice_id: %s'],
    'napari/layers/image/experimental/octree_image.py': [' is negative.', 'Octree level ', 'get_drawable_chunks: Intersection is empty', 'get_drawable_chunks: No slice or view', 'napari.octree.image', 'on_chunk_loaded calling loaded()', 'on_chunk_loaded: load=%.3fms elapsed=%.3fms location = %s', 'tile_config', 'tile_state'],
    'napari/layers/image/experimental/_image_location.py': [') ', ', ', 'location=('],
    'napari/layers/image/_image_utils.py': ['Input data should be an array-like object, or a sequence of arrays of decreasing size. Got arrays in incorrect order, shapes: ', 'Input data should be an array-like object, or a sequence of arrays of decreasing size. Got arrays of single shape: ', 'dtype', 'image', 'labels', 'ndim'],
    'napari/layers/image/_image_view.py': [],
    'napari/layers/image/_image_loader.py': [],
    'napari/layers/image/_image_constants.py': [],
    'napari/layers/image/__init__.py': [],
    'napari/layers/image/_image_slice.py': ['ImageSlice.__init__', 'f', 'napari.loader'],
    'napari/layers/image/_image_slice_data.py': [],
    'napari/layers/image/image.py': ['An asynchronous ChunkRequest was loaded.\n\n            Parameters\n            ----------\n            request : ChunkRequest\n                This request was loaded.\n            ', 'Labels', 'attenuation', 'colormap', 'contrast_limits', 'data', 'gamma', 'gray', 'ignore', 'interpolation', 'iso_threshold', 'mip', 'multiscale', 'nearest', 'rendering', 'rgb', 'tile2data', 'translucent'],
    'napari/layers/points/_points_mouse_bindings.py': ['Control', 'Shift', 'mouse_move', 'mouse_press', 'mouse_release'],
    'napari/layers/points/points.py': ['', 'Mode not recognized', 'Size is not compatible for broadcasting', 'There must be a valid Points.properties to use ', '_', '_color_property was not set, setting to: ', 'black', 'current_value', 'data', 'edge', 'edge_color', 'edge_color_cycle', 'edge_colormap', 'edge_contrast_limits', 'edge_width', 'face', 'face_color', 'face_color_cycle', 'face_colormap', 'face_contrast_limits', 'hold <space> to pan/zoom', 'indices', 'n_dimensional', 'n_text', 'name', 'ndim', 'o', 'pointing', 'properties', 'property used for edge_color dropped', 'property used for face_color dropped', 'selected property must be numeric to use ColorMode.COLORMAP', 'size', 'standard', 'symbol', 'text', 'text should be a string, array, or dict', 'the number of properties must equal the number of points', 'translucent', 'values', 'viridis', 'white'],
    'napari/layers/points/_points_constants.py': ['*', '+', '-', '->', '>', '^', 'o', 's', 'tailed_arrow', 'triangle_down', 'triangle_up', 'v', '|'],
    'napari/layers/points/__init__.py': [],
    'napari/layers/points/_points_utils.py': ['Points dimensions must be equal to ndim'],
    'napari/layers/points/_points_key_bindings.py': ['A', 'Backspace', 'Control-C', 'Control-V', 'Delete', 'P', 'S', 'Space', 'Z'],
    'napari/layers/base/__init__.py': [],
    'napari/layers/base/_base_constants.py': [],
    'napari/layers/base/base.py': ['', ' at ', ' layer ', "'layer.events.deselect' is deprecated and will be removed in napari v0.4.9, use 'viewer.layers.selection.events.changed' instead, and inspect the 'removed' attribute on the event.", "'layer.events.select' is deprecated and will be removed in napari v0.4.9, use 'viewer.layers.selection.events.changed' instead, and inspect the 'added' attribute on the event.", "'layer.selected' is deprecated and will be removed in v0.4.9. Please use `layer in viewer.layers.selection`", "'layer.selected' is deprecated and will be removed in v0.4.9. Please use `viewer.layers.selection.add(layer)` or `viewer.layers.selection.remove(layer)`", '<', '>', 'Extent', 'Non-orthogonal slicing is being requested, but is not fully supported. Data is displayed without applying an out-of-slice rotation or shear component.', 'Ready', '_deprecated_layerlist', '_round_index', 'affine input not recognized. must be either napari.utils.transforms.Affine or ndarray. Got ', 'affine input not recognized. must be either napari.utils.transforms.Affine, ndarray, or None. Got ', 'blending', 'constant', 'data', 'data world step', 'data2world', 'deselect', 'displayed_coordinates is deprecated and will be removed in version 0.4.9. It should no longer be used as layers should will soon not know which dimensions are displayed. Instead you should use [layer.coordinates[d] for d in viewer.dims.displayed]', 'ignore', 'layer.coordinates is deprecated and will be removed in version 0.4.9. It should no longer be used as layers should no longer know where the cursor position is. You can get the cursor position in world coordinates from viewer.cursor.position. You can then transform that into data coordinates using the layer.world_to_data method.', 'layer.position is deprecated and will be removed in version 0.4.9. It should no longer be used as layers should no longer know where the cursor position is. You can get the cursor position in world coordinates from viewer.cursor.position.', 'metadata', 'name', 'opacity', 'opacity must be between 0.0 and 1.0; got ', 'rotate', 'scale', 'select', 'shear', 'standard', 'tile2data', 'translate', 'translucent', 'visible', 'world2grid'],
    'napari/layers/intensity_mixin.py': ['', ', ', '_contrast_limits'],
    'napari/layers/__init__.py': [],

    'napari/experimental/__init__.py': ['chunk_loader', 'layers_linked', 'link_layers', 'synchronous_loading', 'unlink_layers'],

    'napari/components/experimental/monitor/_service.py': ['<number>', 'Listening on port %s', 'MonitorService.stop', 'NAPARI_MON_CLIENT', 'Started %d clients.', 'Starting %d clients...', 'Starting client %s', 'clients', 'napari.monitor', 'server_port'],
    'napari/components/experimental/monitor/_monitor.py': ['0', 'Monitor: Config file not found: ', 'Monitor: not starting, disabled', 'Monitor: not starting, no usable config file', 'Monitor: not starting, requires Python 3.9 or newer', 'NAPARI_MON', 'Writing to log path %s', 'log_path', 'napari.monitor'],
    'napari/components/experimental/monitor/_api.py': ['127.0.0.1', 'Ignore message that was not a dict: %s', 'client_data', 'client_messages', 'napari', 'napari.monitor', 'napari_data', 'napari_messages', 'napari_shutdown'],
    'napari/components/experimental/monitor/__init__.py': [],
    'napari/components/experimental/monitor/_utils.py': ['ascii'],
    'napari/components/experimental/chunk/_commands/_tables.py': [' ', ' columns not compatible with headers (', ' columns)', ': ', '<', '>', 'Row with ', 'align', 'left', 'name', 'right', 'width'],
    'napari/components/experimental/chunk/_commands/_loader.py': ['\n', '\nloader.help\nloader.cache\nloader.config\nloader.layers\nloader.levels(index)\nloader.loads(index)\nloader.set_default(index)\nloader.set_sync(index)\nloader.set_async(index)\n', ' has no LayerInfo.', ' is invalid.', '--', '.1f', '???', 'AVG (ms)', 'Available Commands:', 'CHUNKS', 'DATA', 'DURATION (ms)', 'ID', 'INDEX', 'LAYER', 'LEVEL', 'LEVELS', 'LOADS', 'Layer ID', 'Layer index ', 'Levels', 'MBIT/s', 'MODE', 'Mbit/s', 'NAME', 'NONE', 'Name', 'SHAPE', 'SIZE', 'Shape', 'TOTAL', 'TYPE', 'align', 'async', 'auto', 'auto_sync_ms', 'currsize', 'delay_queue_ms', 'enabled', 'left', 'loader', 'log_path', 'maxsize', 'name', 'num_workers', 'sync', 'synchronous', 'use_processes'],
    'napari/components/experimental/chunk/_commands/__init__.py': [],
    'napari/components/experimental/chunk/_commands/_utils.py': ['\x1b', '\x1b[0m', '[', 'black', 'blue', 'cyan', 'green', 'm', 'magenta', 'red', 'white', 'yellow'],
    'napari/components/experimental/chunk/_cache.py': ['ChunkCache.add_chunk: cache is disabled', 'ChunkCache.get_chunk: disabled', 'add_chunk: %s', 'found', 'get_chunk: %s %s', 'napari.loader.cache', 'not found'],
    'napari/components/experimental/chunk/_info.py': ['LayerInfo.get_layer: layer %d was deleted', 'async', 'load_chunk', 'load_ms', 'mixed', 'napari.loader', 'num_bytes', 'sync', 'time'],
    'napari/components/experimental/chunk/_pool.py': ['Process pool num_workers=%d', 'Thread pool num_workers=%d', '_submit_async: %s elapsed=%.3fms num_futures=%d', 'cancel_requests: %d -> %d futures (cancelled %d)', 'delay_queue_ms', 'napari.loader', 'num_workers', 'use_processes'],
    'napari/components/experimental/chunk/_loader.py': ['\nThere is one global chunk_loader instance to handle async loading for all\nViewer instances. There are two main reasons we do this instead of one\nChunkLoader per Viewer:\n\n1. We size the ChunkCache as a fraction of RAM, so having more than one\n   cache would use too much RAM.\n\n2. We might size the thread pool for optimal performance, and having\n   multiple pools would result in more workers than we want.\n\nThink of the ChunkLoader as a shared resource like "the filesystem" where\nmultiple clients can be access it at the same time, but it is the interface\nto just one physical resource.\n', '%(levelname)s - %(name)s - %(message)s', '_done: load=%.3fms elapsed=%.3fms %s', 'auto_sync_ms', 'enabled', 'force_synchronous', 'loader_defaults', 'log_path', 'napari.loader', 'napari.octree', 'octree', 'wait_for_data_id: no futures for data_id=%d', 'wait_for_data_id: waiting on %d futures for data_id=%d'],
    'napari/components/experimental/chunk/_pool_group.py': ["Missing 'loader_defaults' in octree config.", "Return config merged with the defaults.\n\n        Can't use dict constructor since we have int keys.\n        ", 'loader_defaults', 'loaders', 'octree'],
    'napari/components/experimental/chunk/__init__.py': [],
    'napari/components/experimental/chunk/_request.py': ['image', 'napari.loader', 'thumbnail_source'],
    'napari/components/experimental/chunk/_utils.py': ['EMPTY', 'dask'],
    'napari/components/experimental/chunk/_delay_queue.py': ['DelayQueue.add: %s', 'DelayQueue.submit: %s', 'delay_queue', 'napari.loader'],
    'napari/components/experimental/remote/__init__.py': [],
    'napari/components/experimental/remote/_messages.py': ['delta_ms', 'frame_time', 'layers', 'napari.monitor', 'poll', 'time'],
    'napari/components/experimental/remote/_commands.py': ['Calling RemoteCommands.%s(%s)', 'RemoteCommands.%s does not exist.', 'RemoveCommands._process_command: %s', 'napari.monitor'],
    'napari/components/experimental/remote/_manager.py': ['napari.monitor'],
    'napari/components/experimental/__init__.py': [],
    'napari/components/experimental/commands.py': ['\n', '\nexperimental.cmds.loader\n', 'Available Commands:', 'Available Commands:\nexperimental.cmds.loader'],
    'napari/components/grid.py': [],
    'napari/components/viewer_model.py': ['', ' available yet.', ' does not provide sample data named ', ' is a valid layer type, but there is no viewer.add_', "' not found; options are ", "', did you mean to specify a 'channel_axis'? ", "'. Must be one of: ", "'path' argument must be a string, list, or tuple", "'viewer.active_layer' is deprecated and will be removed in napari v0.4.9.  Please use 'viewer.layers.selection.active' instead.", "'viewer.events.active_layer' is deprecated and will be removed in napari v0.4.9, use 'viewer.layers.selection.events.active' instead", ') for layer type ', '): ', ', ', '. ', 'FullLayerData', 'Got unexpected type for sample (', 'Invalid layer_type: ', 'LayerData', 'LayerData must be a 1-, 2-, or 3-tuple', 'Plugin ', 'Ready', "Received sequence for argument '", 'Sorry! ', 'The second item in a LayerData tuple must be a dict', 'The third item in a LayerData tuple must be one of: ', "Theme '", "Unrecognized layer_type: '", '_add_layer_from_data received an unexpected keyword argument (', '_mouse_drag_gen', '_mouse_wheel_gen', '_persisted_mouse_event', 'active_layer', 'add_', 'affine', 'attenuation', 'axis_labels', 'blending', 'colormap', 'contrast_limits', 'dark', 'data', 'exclude', 'gamma', 'gray', 'ignore', 'int', 'interpolation', 'iso_threshold', 'keymap', 'keyword argument ', 'kwargs', 'layer', 'layer.position is deprecated', 'layers', 'metadata', 'mip', 'mouse_drag_callbacks', 'mouse_move_callbacks', 'mouse_wheel_callbacks', 'multiscale', 'name', 'napari', 'napari.Viewer: ', 'ndisplay', 'nearest', 'opacity', 'order', 'rendering', 'rgb', 'rotate', 'scale', 'self', 'shear', 'standard', 'theme', 'translate', 'translucent', 'unexpected keyword argument', 'visible'],
    'napari/components/layerlist.py': ["'viewer.layers.selected' is deprecated and will be removed in or after v0.4.9. Please use 'viewer.layers.selection'", "'viewer.layers.unselect_all()' is deprecated and will be removed in or after v0.4.9. Please use 'viewer.layers.selection.clear()'. To unselect everything but a set of ignored layers, use 'viewer.layers.selection.intersection_update({ignored})'", 'All-NaN axis encountered', 'Extent', 'No layers ', 'data world step', 'ignore', 'selected', 'to save'],
    'napari/components/__init__.py': [],
    'napari/components/camera.py': ['angles', 'center'],
    'napari/components/_viewer_constants.py': ['bottom_left', 'bottom_right', 'circle', 'cross', 'forbidden', 'pointing', 'square', 'standard', 'top_left', 'top_right'],
    'napari/components/scale_bar.py': [],
    'napari/components/_viewer_key_bindings.py': ['Alt-Down', 'Alt-Up', 'Control', 'Control-A', 'Control-Backspace', 'Control-Delete', 'Control-E', 'Control-G', 'Control-R', 'Control-Shift-Backspace', 'Control-Shift-Delete', 'Control-Shift-T', 'Control-T', 'Control-Y', 'Down', 'Left', 'Right', 'Shift-Down', 'Shift-Up', 'Up', 'V'],
    'napari/components/dims.py': [' dimensions', ' for ', ' not defined for dimensionality ', ').', ', ', '. Must be in [', 'Axis ', 'Invalid ordering ', 'axis_labels', 'current_step', 'ndim', 'order', 'range'],
    'napari/components/_viewer_mouse_bindings.py': ['Control'],
    'napari/components/axes.py': [],
    'napari/components/cursor.py': [],

    'napari/benchmarks/benchmark_qt_viewer_image.py': [],
    'napari/benchmarks/benchmark_qt_viewer_labels.py': ['Event', 'is_dragging', 'paint'],
    'napari/benchmarks/benchmark_qt_viewer.py': [],
    'napari/benchmarks/benchmark_labels_layer.py': ['circle', 'square'],
    'napari/benchmarks/__init__.py': [],
    'napari/benchmarks/benchmark_image_layer.py': [],
    'napari/benchmarks/benchmark_shapes_layer.py': ['Event', 'is_dragging', 'modifiers', 'mouse_press', 'mouse_release', 'n_shapes', 'polygon', 'position', 'select', 'type'],
    'napari/benchmarks/benchmark_points_layer.py': [],
    'napari/benchmarks/benchmark_surface_layer.py': [],
    'napari/benchmarks/benchmark_vectors_layer.py': [],

    'napari/_vispy/experimental/texture_atlas.py': [' is not compatible with this TextureAtlas2D which has tile shape ', 'Data with shape '],
    'napari/_vispy/experimental/vispy_tiled_image_layer.py': ['_update_drawn_chunks', 'napari.octree.visual', 'tiles: %d -> %d create: %d delete: %d time: %.3fms'],
    'napari/_vispy/experimental/tile_set.py': [],
    'napari/_vispy/experimental/__init__.py': [],
    'napari/_vispy/experimental/tile_grid.py': ['segments'],
    'napari/_vispy/experimental/tiled_image_visual.py': [' not found.', 'Auto clims not supported for tiled image visual', 'Tile index ', 'auto', 'bilinear', 'color_transform', 'linear', 'nearest', 'texture', 'texture2D_LUT', 'texture_lut'],
    'napari/_vispy/vendored/__init__.py': [],
    'napari/_vispy/vendored/volume.py': ['\n        ', "\n            color = applyColormap(val);\n            float a1 = integrated_color.a;\n            float a2 = color.a * (1 - a1);\n            float alpha = max(a1 + a2, 0.001);\n            \n            // Doesn't work.. GLSL optimizer bug?\n            //integrated_color = (integrated_color * a1 / alpha) + \n            //                   (color * a2 / alpha); \n            // This should be identical but does work correctly:\n            integrated_color *= a1 / alpha;\n            integrated_color += color * a2 / alpha;\n            \n            integrated_color.a = alpha;\n            \n            if( alpha > 0.99 ){\n                // stop integrating if the fragment becomes opaque\n                iter = nsteps;\n            }\n        \n        ", '\n          6-------7\n         /|      /|\n        4-------5 |\n        | |     | |\n        | 2-----|-3\n        |/      |/\n        0-------1\n        ', '\n        // Refine search for max value\n        loc = start_loc + step * (float(maxi) - 0.5);\n        for (int i=0; i<10; i++) {\n            maxval = max(maxval, $sample(u_volumetex, loc).g);\n            loc += step * 0.1;\n        }\n        gl_FragColor = applyColormap(maxval);\n        ', '\n        color = applyColormap(val);\n        \n        integrated_color = 1.0 - (1.0 - integrated_color) * (1.0 - color);\n        ', '\n        float maxval = -99999.0; // The maximum encountered value\n        int maxi = 0;  // Where the maximum value was encountered\n        ', '\n        gl_FragColor = integrated_color;\n        ', '\n        if (val > u_threshold-0.2) {\n            // Take the last interval in smaller steps\n            vec3 iloc = loc - step;\n            for (int i=0; i<10; i++) {\n                color = $sample(u_volumetex, iloc);\n                if (color.g > u_threshold) {\n                    color = calculateColor(color, iloc, dstep);\n                    gl_FragColor = applyColormap(color.g);\n                    iter = nsteps;\n                    break;\n                }\n                iloc += step * 0.1;\n            }\n        }\n        ', '\n        if( val > maxval ) {\n            maxval = val;\n            maxi = iter;\n        }\n        ', '\n        vec4 color3 = vec4(0.0);  // final color\n        vec3 dstep = 1.5 / u_shape;  // step to sample derivative\n        gl_FragColor = vec4(0.0);\n    ', '\n        vec4 integrated_color = vec4(0., 0., 0., 0.);\n        ', '\n// uniforms\nuniform $sampler_type u_volumetex;\nuniform vec3 u_shape;\nuniform vec2 clim;\nuniform float gamma;\nuniform float u_threshold;\nuniform float u_attenuation; // todo add to vispy from napari\nuniform float u_relative_step_size;\n\n//varyings\n// varying vec3 v_texcoord;\nvarying vec3 v_position;\nvarying vec4 v_nearpos;\nvarying vec4 v_farpos;\n\n// uniforms for lighting. Hard coded until we figure out how to do lights\nconst vec4 u_ambient = vec4(0.2, 0.2, 0.2, 1.0);\nconst vec4 u_diffuse = vec4(0.8, 0.2, 0.2, 1.0);\nconst vec4 u_specular = vec4(1.0, 1.0, 1.0, 1.0);\nconst float u_shininess = 40.0;\n\n//varying vec3 lightDirs[1];\n\n// global holding view direction in local coordinates\nvec3 view_ray;\n\nfloat rand(vec2 co)\n{{\n    // Create a pseudo-random number between 0 and 1.\n    // http://stackoverflow.com/questions/4200224\n    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\n}}\n\nfloat colorToVal(vec4 color1)\n{{\n    return color1.g; // todo: why did I have this abstraction in visvis?\n}}\n\nvec4 applyColormap(float data) {{\n    if (clim.x < clim.y) {{\n        data = clamp(data, clim.x, clim.y);\n    }} else {{\n        data = clamp(data, clim.y, clim.x);\n    }}\n\n    data = (data - clim.x) / (clim.y - clim.x);\n    return $cmap(pow(data, gamma));\n}}\n\n\nvec4 calculateColor(vec4 betterColor, vec3 loc, vec3 step)\n{{   \n    // Calculate color by incorporating lighting\n    vec4 color1;\n    vec4 color2;\n    \n    // View direction\n    vec3 V = normalize(view_ray);\n    \n    // calculate normal vector from gradient\n    vec3 N; // normal\n    color1 = $sample( u_volumetex, loc+vec3(-step[0],0.0,0.0) );\n    color2 = $sample( u_volumetex, loc+vec3(step[0],0.0,0.0) );\n    N[0] = colorToVal(color1) - colorToVal(color2);\n    betterColor = max(max(color1, color2),betterColor);\n    color1 = $sample( u_volumetex, loc+vec3(0.0,-step[1],0.0) );\n    color2 = $sample( u_volumetex, loc+vec3(0.0,step[1],0.0) );\n    N[1] = colorToVal(color1) - colorToVal(color2);\n    betterColor = max(max(color1, color2),betterColor);\n    color1 = $sample( u_volumetex, loc+vec3(0.0,0.0,-step[2]) );\n    color2 = $sample( u_volumetex, loc+vec3(0.0,0.0,step[2]) );\n    N[2] = colorToVal(color1) - colorToVal(color2);\n    betterColor = max(max(color1, color2),betterColor);\n    float gm = length(N); // gradient magnitude\n    N = normalize(N);\n    \n    // Flip normal so it points towards viewer\n    float Nselect = float(dot(N,V) > 0.0);\n    N = (2.0*Nselect - 1.0) * N;  // ==  Nselect * N - (1.0-Nselect)*N;\n    \n    // Get color of the texture (albeido)\n    color1 = betterColor;\n    color2 = color1;\n    // todo: parametrise color1_to_color2\n    \n    // Init colors\n    vec4 ambient_color = vec4(0.0, 0.0, 0.0, 0.0);\n    vec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);\n    vec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);\n    vec4 final_color;\n    \n    // todo: allow multiple light, define lights on viewvox or subscene\n    int nlights = 1; \n    for (int i=0; i<nlights; i++)\n    {{ \n        // Get light direction (make sure to prevent zero devision)\n        vec3 L = normalize(view_ray);  //lightDirs[i]; \n        float lightEnabled = float( length(L) > 0.0 );\n        L = normalize(L+(1.0-lightEnabled));\n        \n        // Calculate lighting properties\n        float lambertTerm = clamp( dot(N,L), 0.0, 1.0 );\n        vec3 H = normalize(L+V); // Halfway vector\n        float specularTerm = pow( max(dot(H,N),0.0), u_shininess);\n        \n        // Calculate mask\n        float mask1 = lightEnabled;\n        \n        // Calculate colors\n        ambient_color +=  mask1 * u_ambient;  // * gl_LightSource[i].ambient;\n        diffuse_color +=  mask1 * lambertTerm;\n        specular_color += mask1 * specularTerm * u_specular;\n    }}\n    \n    // Calculate final color by componing different components\n    final_color = color2 * ( ambient_color + diffuse_color) + specular_color;\n    final_color.a = color2.a;\n    \n    // Done\n    return final_color;\n}}\n\n// for some reason, this has to be the last function in order for the\n// filters to be inserted in the correct place...\n\nvoid main() {{\n    vec3 farpos = v_farpos.xyz / v_farpos.w;\n    vec3 nearpos = v_nearpos.xyz / v_nearpos.w;\n\n    // Calculate unit vector pointing in the view direction through this\n    // fragment.\n    view_ray = normalize(farpos.xyz - nearpos.xyz);\n\n    // Compute the distance to the front surface or near clipping plane\n    float distance = dot(nearpos-v_position, view_ray);\n    distance = max(distance, min((-0.5 - v_position.x) / view_ray.x,\n                            (u_shape.x - 0.5 - v_position.x) / view_ray.x));\n    distance = max(distance, min((-0.5 - v_position.y) / view_ray.y,\n                            (u_shape.y - 0.5 - v_position.y) / view_ray.y));\n    distance = max(distance, min((-0.5 - v_position.z) / view_ray.z,\n                            (u_shape.z - 0.5 - v_position.z) / view_ray.z));\n\n    // Now we have the starting position on the front surface\n    vec3 front = v_position + view_ray * distance;\n\n    // Decide how many steps to take\n    int nsteps = int(-distance / u_relative_step_size + 0.5);\n    float f_nsteps = float(nsteps);\n    if( nsteps < 1 )\n        discard;\n\n    // Get starting location and step vector in texture coordinates\n    vec3 step = ((v_position - front) / u_shape) / f_nsteps;\n    vec3 start_loc = front / u_shape;\n\n    // For testing: show the number of steps. This helps to establish\n    // whether the rays are correctly oriented\n    //gl_FragColor = vec4(0.0, f_nsteps / 3.0 / u_shape.x, 1.0, 1.0);\n    //return;\n\n    {before_loop}\n\n    // This outer loop seems necessary on some systems for large\n    // datasets. Ugly, but it works ...\n    vec3 loc = start_loc;\n    int iter = 0;\n    while (iter < nsteps) {{\n        for (iter=iter; iter<nsteps; iter++)\n        {{\n            // Get sample color\n            vec4 color = $sample(u_volumetex, loc);\n            float val = color.g;\n\n            {in_loop}\n\n            // Advance location deeper into the volume\n            loc += step;\n        }}\n    }}\n\n    {after_loop}\n\n    /* Set depth value - from visvis TODO\n    int iter_depth = int(maxi);\n    // Calculate end position in world coordinates\n    vec4 position2 = vertexPosition;\n    position2.xyz += ray*shape*float(iter_depth);\n    // Project to device coordinates and set fragment depth\n    vec4 iproj = gl_ModelViewProjectionMatrix * position2;\n    iproj.z /= iproj.w;\n    gl_FragDepth = (iproj.z+1.0)/2.0;\n    */\n}}\n\n\n', '\nattribute vec3 a_position;\n// attribute vec3 a_texcoord;\nuniform vec3 u_shape;\n\n// varying vec3 v_texcoord;\nvarying vec3 v_position;\nvarying vec4 v_nearpos;\nvarying vec4 v_farpos;\n\nvoid main() {\n    // v_texcoord = a_texcoord;\n    v_position = a_position;\n    \n    // Project local vertex coordinate to camera position. Then do a step\n    // backward (in cam coords) and project back. Voila, we get our ray vector.\n    vec4 pos_in_cam = $viewtransformf(vec4(v_position, 1));\n\n    // intersection of ray and near clipping plane (z = -1 in clip coords)\n    pos_in_cam.z = -pos_in_cam.w;\n    v_nearpos = $viewtransformi(pos_in_cam);\n    \n    // intersection of ray and far clipping plane (z = +1 in clip coords)\n    pos_in_cam.z = pos_in_cam.w;\n    v_farpos = $viewtransformi(pos_in_cam);\n    \n    gl_Position = $transform(vec4(v_position, 1.0));\n}\n', ', ', 'Volume render method should be in %r, not %r', 'Volume visual needs a 3D image.', 'Volume visual needs a numpy array.', 'a_position', 'a_texcoord', 'additive', 'clamp_to_edge', 'clim', 'clim must be a 2-element array-like', 'cmap', 'document', 'float32', 'gamma', 'gamma must be > 0', 'grays', 'interpolation must be one of %s', 'iso', 'linear', 'mip', 'nearest', 'relative_step_size cannot be smaller than 0.1', 'sample', 'sampler_type', 'texture2D_LUT', 'texture_lut', 'transform', 'translucent', 'triangle_strip', 'u_relative_step_size', 'u_shape', 'u_threshold', 'u_volumetex', 'viewtransformf', 'viewtransformi', 'visual'],
    'napari/_vispy/vendored/image.py': ['\n    #include "misc/spatial-filters.frag"\n    vec4 texture_lookup_filtered(vec2 texcoord) {\n        if(texcoord.x < 0.0 || texcoord.x > 1.0 ||\n        texcoord.y < 0.0 || texcoord.y > 1.0) {\n            discard;\n        }\n        return %s($texture, $shape, texcoord);\n    }', '\n    float apply_clim(float data) {\n        data = data - $clim.x;\n        data = data / ($clim.y - $clim.x);\n        return max(data, 0);\n    }', '\n    float apply_gamma(float data) {\n        return pow(data, $gamma);\n    }', '\n    vec4 apply_clim(vec4 color) {\n        color.rgb = color.rgb - $clim.x;\n        color.rgb = color.rgb / ($clim.y - $clim.x);\n        return max(color, 0);\n    }\n', '\n    vec4 apply_gamma(vec4 color) {\n        color.rgb = pow(color.rgb, vec3($gamma));\n        return color;\n    }\n', '\n    vec4 texture_lookup(vec2 texcoord) {\n        if(texcoord.x < 0.0 || texcoord.x > 1.0 ||\n        texcoord.y < 0.0 || texcoord.y > 1.0) {\n            discard;\n        }\n        return texture2D($texture, texcoord);\n    }', '\nuniform int method;  // 0=subdivide, 1=impostor\nattribute vec2 a_position;\nattribute vec2 a_texcoord;\nvarying vec2 v_texcoord;\n\nvoid main() {\n    v_texcoord = a_texcoord;\n    gl_Position = $transform(vec4(a_position, 0., 1.));\n}\n', '\nuniform vec2 image_size;\nuniform int method;  // 0=subdivide, 1=impostor\nuniform sampler2D u_texture;\nvarying vec2 v_texcoord;\n\nvec4 map_local_to_tex(vec4 x) {\n    // Cast ray from 3D viewport to surface of image\n    // (if $transform does not affect z values, then this\n    // can be optimized as simply $transform.map(x) )\n    vec4 p1 = $transform(x);\n    vec4 p2 = $transform(x + vec4(0, 0, 0.5, 0));\n    p1 /= p1.w;\n    p2 /= p2.w;\n    vec4 d = p2 - p1;\n    float f = p2.z / d.z;\n    vec4 p3 = p2 - d * f;\n\n    // finally map local to texture coords\n    return vec4(p3.xy / image_size, 0, 1);\n}\n\n\nvoid main()\n{\n    vec2 texcoord;\n    if( method == 0 ) {\n        texcoord = v_texcoord;\n    }\n    else {\n        // vertex shader outputs clip coordinates;\n        // fragment shader maps to texture coordinates\n        texcoord = map_local_to_tex(vec4(v_texcoord, 0, 1)).xy;\n    }\n\n    gl_FragColor = $color_transform($get_data(texcoord));\n}\n', ', ', "Unknown image draw method '%s'", 'a_position', 'a_texcoord', 'auto', 'bilinear', 'clim', 'clim must be "auto" if a string', 'clim must have two elements', 'color_transform', 'float cmap(vec4 color) { return (color.r + color.g + color.b) / 3.; }', 'float32', 'gamma', 'gamma must be > 0', 'get_data', 'image_size', 'impostor', 'interpolation must be one of %s', 'linear', 'method', 'nearest', 'shape', 'subdivide', 'texture', 'texture2D_LUT', 'texture_lut', 'transform', 'translucent', 'triangles', 'u_kernel', 'vec4 pass(vec4 color) { return color; }', 'viridis'],
    'napari/_vispy/vispy_image_layer.py': [' cannot exceed GL_MAX_TEXTURE_SIZE ', ' exceeds GL_MAX_TEXTURE_SIZE ', ' in at least one axis and will be downsampled. Rendering is currently in ', '. Rendering is currently in ', 'D mode.', 'Shape of individual tiles in multiscale ', 'auto', 'data shape ', 'tile2data'],
    'napari/_vispy/vispy_surface_layer.py': ['texture2D_LUT', 'texture_lut'],
    'napari/_vispy/vispy_scale_bar_visual.py': [' not recognized.', '.4g', 'Position ', 'canvas', 'center', 'gl', 'segments'],
    'napari/_vispy/vispy_vectors_layer.py': ['constant'],
    'napari/_vispy/_text_utils.py': [],
    'napari/_vispy/vispy_points_layer.py': ['center', 'transparent'],
    'napari/_vispy/quaternion.py': [],
    'napari/_vispy/vispy_tracks_layer.py': ['white'],
    'napari/_vispy/__init__.py': ['vispy'],
    'napari/_vispy/vispy_shapes_layer.py': ['center', 'constant', 'square'],
    'napari/_vispy/volume.py': ['\n        // Apply colormap on mean value\n        gl_FragColor = applyColormap(meanval);\n        ', '\n        // Incremental mean value used for numerical stability\n        n += 1; // Increment the counter\n        prev_mean = meanval; // Update the mean for previous iteration\n        meanval = prev_mean + (val - prev_mean) / n; // Calculate the mean\n        ', '\n        // Refine search for min value\n        loc = start_loc + step * (float(mini) - 0.5);\n        for (int i=0; i<10; i++) {\n            minval = min(minval, $sample(u_volumetex, loc).g);\n            loc += step * 0.1;\n        }\n        gl_FragColor = applyColormap(minval);\n        ', '\n        float maxval = -99999.0; // The maximum encountered value\n        float sumval = 0.0; // The sum of the encountered values\n        float scaled = 0.0; // The scaled value\n        int maxi = 0;  // Where the maximum value was encountered\n        vec3 maxloc = vec3(0.0);  // Location where the maximum value was encountered\n        ', '\n        float minval = 99999.0; // The minimum encountered value\n        int mini = 0;  // Where the minimum value was encountered\n        ', '\n        float n = 0; // Counter for encountered values\n        float meanval = 0.0; // The mean of encountered values\n        float prev_mean = 0.0; // Variable to store the previous incremental mean\n        ', '\n        gl_FragColor = applyColormap(maxval);\n        ', '\n        if( val < minval ) {\n            minval = val;\n            mini = iter;\n        }\n        ', '\n        sumval = sumval + val;\n        scaled = val * exp(-u_attenuation * (sumval - 1) / u_relative_step_size);\n        if( scaled > maxval ) {\n            maxval = scaled;\n            maxi = iter;\n            maxloc = loc;\n        }\n        ', 'attenuated_mip', 'average', 'cmap', 'minip', 'texture2D_LUT', 'texture_lut', 'u_attenuation', 'u_threshold'],
    'napari/_vispy/utils_gl.py': [' not allowed for texture; must be one of ', 'type '],
    'napari/_vispy/utils.py': ['Could not find VispyLayer for layer of type '],
    'napari/_vispy/vispy_camera.py': ['first'],
    'napari/_vispy/vispy_base_layer.py': ['data2world'],
    'napari/_vispy/vispy_welcome_visual.py': ['..', 'background', 'center', 'gpu', 'grays', 'left', 'logo.png', 'primary', 'resources', 'to add data:\n   - drag and drop file(s) here\n   - select File > Open from the menu\n   - call a viewer.add_* method'],
    'napari/_vispy/_vispy_tracks_shader.py': ['\n        varying vec4 v_track_color;\n        void apply_track_shading() {\n\n            // if the alpha is below the threshold, discard the fragment\n            if( v_track_color.a <= 0.0 ) {\n                discard;\n            }\n\n            // interpolate\n            gl_FragColor.a = clamp(v_track_color.a * gl_FragColor.a, 0.0, 1.0);\n        }\n    ', '\n        varying vec4 v_track_color;\n        void apply_track_shading() {\n\n            float alpha;\n\n            if ($a_vertex_time > $current_time) {\n                // this is a hack to minimize the frag shader rendering ahead\n                // of the current time point due to interpolation\n                if ($a_vertex_time <= $current_time + 1){\n                    alpha = -100.;\n                } else {\n                    alpha = 0.;\n                }\n            } else {\n                // fade the track into the temporal distance, scaled by the\n                // maximum tail length from the gui\n                float fade = ($current_time - $a_vertex_time) / $tail_length;\n                alpha = clamp(1.0-fade, 0.0, 1.0);\n            }\n\n            // when use_fade is disabled, the entire track is visible\n            if ($use_fade == 0) {\n                alpha = 1.0;\n            }\n\n            // set the vertex alpha according to the fade\n            v_track_color.a = alpha;\n        }\n    ', 'a_vertex_time', 'current_time', 'tail_length', 'use_fade'],
    'napari/_vispy/markers.py': ['a_position'],
    'napari/_vispy/vispy_canvas.py': ['canvas', 'lequal', 'mouse_wheel'],
    'napari/_vispy/vispy_axes_visual.py': ['.', 'Axes dash status and ndisplay combination not supported', 'Either 2 or 3 colors must be provided, got ', 'canvas', 'center', 'gl', 'segments'],
    'napari/_vispy/image.py': [],

    'napari/_vendor/experimental/cachetools/cachetools/cache.py': ['%s(%r, maxsize=%r, currsize=%r)', 'value too large'],
    'napari/_vendor/experimental/cachetools/cachetools/__init__.py': ['4.1.1', 'Cache', 'LFUCache', 'LRUCache', 'RRCache', 'TTLCache', 'cached', 'cachedmethod'],
    'napari/_vendor/experimental/cachetools/cachetools/keys.py': ['hashkey', 'typedkey'],
    'napari/_vendor/experimental/cachetools/cachetools/rr.py': ['%s is empty'],
    'napari/_vendor/experimental/cachetools/cachetools/ttl.py': ['%s is empty', 'expire', 'key', 'next', 'prev'],
    'napari/_vendor/experimental/cachetools/cachetools/lru.py': ['%s is empty'],
    'napari/_vendor/experimental/cachetools/cachetools/lfu.py': ['%s is empty'],
    'napari/_vendor/experimental/cachetools/cachetools/func.py': ['CacheInfo', 'currsize', 'hits', 'lfu_cache', 'lru_cache', 'maxsize', 'misses', 'rr_cache', 'ttl_cache', 'typed'],
    'napari/_vendor/experimental/cachetools/cachetools/abc.py': ['__missing__'],
    'napari/_vendor/experimental/cachetools/cachetools/decorators.py': [],
    'napari/_vendor/experimental/cachetools/__init__.py': [],
    'napari/_vendor/experimental/humanize/src/humanize/time.py': [' and ', '%0.2f', '%b %d', '%b %d %Y', '%d', '%d day', '%d days', '%d hour', '%d hours', '%d microsecond', '%d microseconds', '%d millisecond', '%d milliseconds', '%d minute', '%d minutes', '%d month', '%d months', '%d second', '%d seconds', '%d year', '%d years', '%s ago', '%s from now', "' not supported", ', ', '1 year, %d day', '1 year, %d days', '1 year, %d month', '1 year, %d months', '1 year, 1 month', "Minimum unit '", 'Minimum unit is suppressed and no suitable replacement was found', 'a day', 'a minute', 'a moment', 'a month', 'a second', 'a year', 'an hour', 'naturaldate', 'naturalday', 'naturaldelta', 'naturaltime', 'now', 'precisedelta', 'seconds', 'today', 'tomorrow', 'yesterday'],
    'napari/_vendor/experimental/humanize/src/humanize/number.py': [' ', ' x 10', '%.1f', '+', '+0', ',', '-', '-0', '.0f', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '\\g<1>,\\g<2>', '^(-?\\d+)(\\d{3})', 'billion', 'decillion', 'e', 'eight', 'five', 'four', 'googol', 'million', 'nd', 'nine', 'nonillion', 'octillion', 'one', 'quadrillion', 'quintillion', 'rd', 'septillion', 'seven', 'sextillion', 'six', 'st', 'th', 'three', 'trillion', 'two', 'zero', '{0:.{1}f}', '{:.%se}', '²', '³', '¹', '⁰', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹', '⁺', '⁻'],
    'napari/_vendor/experimental/humanize/src/humanize/filesize.py': ['%.1f', '%d Byte', '%d Bytes', '%dB', '%s', 'EB', 'EiB', 'GB', 'GiB', 'KMGTPEZY', 'KiB', 'MB', 'MiB', 'PB', 'PiB', 'TB', 'TiB', 'YB', 'YiB', 'ZB', 'ZiB', 'binary', 'decimal', 'gnu', 'kB'],
    'napari/_vendor/experimental/humanize/src/humanize/__init__.py': ['2.5.0', 'VERSION', '__version__', 'activate', 'apnumber', 'deactivate', 'fractional', 'intcomma', 'intword', 'naturaldate', 'naturalday', 'naturaldelta', 'naturalsize', 'naturaltime', 'ordinal', 'precisedelta', 'scientific'],
    'napari/_vendor/experimental/humanize/src/humanize/i18n.py': ['\x04', "Humanize cannot determinate the default location of the 'locale' folder. You need to pass the path explicitly.", 'activate', 'deactivate', 'gettext', 'humanize', 'locale', 'ngettext'],
    'napari/_vendor/experimental/__init__.py': [],
    'napari/_vendor/qt_json_builder/qt_jsonschema_form/signal.py': [],
    'napari/_vendor/qt_json_builder/qt_jsonschema_form/__init__.py': [],
    'napari/_vendor/qt_json_builder/qt_jsonschema_form/widgets.py': ['', '#f6989d', '#ffffff', '.', '.state', '</b> ', '<b>.', 'Browse', 'Cannot handle nested error by default', 'Errors', 'Preferences', 'WidgetBuilder', 'additionalItems', 'background-color: %s;', 'description', 'enum', 'exclusiveMaximum', 'exclusiveMinimum', 'items', 'maximum', 'minimum', 'multipleOf', 'properties', 'title'],
    'napari/_vendor/qt_json_builder/qt_jsonschema_form/form.py': ['array', 'boolean', 'checkbox', 'colour', 'enum', 'filepath', 'format', 'integer', 'number', 'object', 'password', 'range', 'spin', 'string', 'text', 'textarea', 'type', 'ui:widget'],
    'napari/_vendor/qt_json_builder/qt_jsonschema_form/utils.py': ['type'],
    'napari/_vendor/qt_json_builder/qt_jsonschema_form/defaults.py': ['array', 'default', 'enum', 'items', 'object', 'properties', 'type'],
    'napari/_vendor/__init__.py': [],

    'napari/conftest.py': ['--async_only', '.csv', '.png', '.tif', '0', 'Legacy skimage image_fetcher cannot find file: ', '_PYTEST_RAISE', 'async_only', 'camera', 'coins', 'data/', 'data/astronaut.png', 'data/camera.png', 'data/multipage.tif', 'ellipse', 'ex_img', 'ex_pts', 'image', 'labels', 'line', 'moon', 'not running with --async_only', 'path', 'points', 'points-with-properties', 'polygon', 'rectangle', 'run only asynchronous tests', 'running with --async_only', 'session', 'shapes', 'shapes-rectangles', 'store_true', 'sync_only', 'test_trace_on_start', 'uint64', 'values', 'vectors'],
    'napari/viewer.py': ['Window', 'napari'],
    'napari/window.py': ['Window', 'could not import qtpy.  Cannot show napari window.'],
    'napari/_version.py': ['0.4.7.dev82+g18c647c.d20210406', 'd20210406', 'dev82+g18c647c'],
    'napari/__init__.py': ['1', 'SPARSE_AUTO_DENSIFY', 'Viewer', 'gui_qt', 'not-installed', 'run', 'save_layers', 'sys_info', 'view_image', 'view_labels', 'view_path', 'view_points', 'view_shapes', 'view_surface', 'view_tracks', 'view_vectors'],
    'napari/view_layers.py': ['\n', '\n        _kw = locals()\n        view_kwargs = {\n            k: _kw.pop(k) for k in list(_kw) if k in view_sig.parameters\n        }\n        viewer = napari.Viewer(**view_kwargs)\n        if \'kwargs\' in _kw:\n            _kw.update(_kw.pop("kwargs"))\n    ', '    viewer.', "'", '(**_kw)\n        return viewer', ':', 'Create a viewer and add a{n} {name} layer.\n\n{params}\n\nReturns\n-------\nviewer : :class:`napari.Viewer`\n    The newly-created viewer.\n', 'List', "No Viewer method named '", 'NoneType', 'Optional', 'Parameters', 'Sequence', 'Union', 'add_', 'aeiou', 'def view_', 'exec', 'image', 'labels', 'n', 'napari', 'open', 'path', 'points', 'shapes', 'surface', 'tracks', 'typing', 'vectors', 'view_', 'view_sig'],
    'napari/types.py': ['.', '1', '20', 'FunctionGui', 'ImageData', 'LabelsData', 'LayerDataTuple', 'PointsData', 'QWidget', 'ShapesData', 'SurfaceData', 'TracksData', 'VectorsData', 'dask.array.Array', 'zarr.Array'],
    'napari/_event_loop.py': [],
    'napari/__main__.py': ['\n', '\n‼️  Errors were detected in the following plugins:', "   (use '-v') to show full tracebacks", '  - ', '  cause: ', '  error: ', '  traceback:', ' expected one argument', '%(asctime)s %(levelname)s %(message)s', '%H:%M:%S', "(Run 'napari --plugin-info -v' for more details)", '*', '+', ', ', '--', '--citation', '--info', '--layer-type', '--plugin', '--plugin-info', '--reset', '--stack', '--verbose', '--version', '--with', '-m', '-v', '-w', '.py', '1', '19.0.0', '20.0.0', ':', '=', 'CONDA_PREFIX', 'PLUGIN_NAME', 'PYTHONEXECUTABLE', 'QT_MAC_WANTS_LAYER', 'Resetting settings to default values.\n', 'TYPE', 'WIDGET_NAME', 'When providing a python script, only a single positional argument may be provided', '_', '__main__', 'bin', 'concatenate multiple input files into a single stack.', 'count', 'darwin', "error: The '--plugin' argument is only valid when providing a file name", 'error: argument ', 'error: unrecognized arguments: ', 'force file to be interpreted as a specific layer type. one of ', 'increase output verbosity', 'napari', 'napari version ', 'open napari with dock widget from specified plugin name.(If plugin provides multiple dock widgets, widget name must also be provided)', "optional layer-type-specific arguments (precede with '--'):\n", 'path(s) to view.', 'paths', 'pythonw', 'pythonw executable not found.\nTo unfreeze the menubar on macOS, click away from napari to another app, then reactivate napari. To avoid this problem, please install python.app in conda using:\nconda install -c conda-forge python.app', 'reset settings to default values.', 'show citation information and exit', 'show information about plugins and exit', 'show system information and exit', 'specify plugin name when opening a file', 'store_true', 'version', 'with_', '‼️  Some errors occurred:'],
}


class FindStrings(ast.NodeVisitor):  

    def __init__(self):
        super().__init__()
        self._found = set()

    def visit_Str(self, node):
        # print("string at", node.lineno, node.col_offset, repr(node.s))
        self._found.add(node.s)


class FindTransStrings(ast.NodeVisitor):

    def __init__(self):
        super().__init__()
        self._found = set()

    def visit_Call(self, node):
        try:
            if node.func.value.id == "trans":
                # print(f"trans.{node.func.attr}", [arg.value for arg in node.args])
                for item in [arg.value for arg in node.args]:
                    self._found.add(item)
        except Exception:
            pass

        self.generic_visit(node)


show_strings = FindStrings()
show_trans_strings = FindTransStrings()


def find_files(path):
    """
    """
    found_files = []
    for root, _dirs, files in os.walk(path, topdown=False):
        for filename in files:
            fpath = os.path.join(root, filename)

            if any(folder in fpath for folder in SKIP_FOLDERS):
                continue

            if any(_file in fpath for _file in SKIP_FILES):
                continue

            if filename.endswith(".py"):
                found_files.append(fpath)

    return found_files


def get_docstrings(module):
    docstrings = []
    function_definitions = [node for node in module.body if isinstance(node, ast.FunctionDef)]
    docstrings.extend([ast.get_docstring(f) for f in function_definitions])
    class_definitions = [node for node in module.body if isinstance(node, ast.ClassDef)]
    docstrings.extend([ast.get_docstring(f) for f in class_definitions])
    method_definitions = []

    for class_def in class_definitions:
        method_definitions.extend([node for node in class_def.body if isinstance(node, ast.FunctionDef)])

    docstrings.extend([ast.get_docstring(f) for f in method_definitions])
    docstrings.append(ast.get_docstring(module))
    docstrings = [doc for doc in docstrings if doc]

    results = {}
    for doc in docstrings:
        key = " ".join([it for it in doc.split() if it != ""])
        results[key] = doc

    return results


def find_strings(paths):
    for fpath in paths:
        with open(fpath) as fh:
            data = fh.read()

        # print(fpath)
        module = ast.parse(data)
        show_strings.visit(module)
        all_strings = {}
        for string in show_strings._found:
            key = " ".join([it for it in string.split()])
            all_strings[key] = string
        show_strings._found = set()

        trans_strings = {}
        show_trans_strings.visit(module)
        for string in show_trans_strings._found:
            key = " ".join([it for it in string.split()])
            trans_strings[key] = string
        show_trans_strings._found = set()

        doc_strings = get_docstrings(module)
        skip_words = SKIP_WORDS.get(fpath, [])
        found = []
        for string in all_strings:
            value = all_strings[string]
            if string not in doc_strings and string not in trans_strings and value not in skip_words:
                found.append(value)
                # print([value])

        print(repr(fpath) + ": " + repr(sorted(found)) + ",")


if __name__ == "__main__":
    path = sys.argv[1]
    paths = find_files(path)
    find_strings(paths)

# print(ast.dump(ast.parse("""
# class A:
#     def _(self, a):
#         pass

# trans = A()
# trans._("test")
# """)))
