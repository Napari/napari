stages:
  - stage: Builds
    jobs:
      - job: linux_pyinstaller
        pool: {vmImage: 'Ubuntu-16.04'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install -r requirements.txt
              python -m pip install pyinstaller PyQt5 wheel
              python -m pip install --no-build-isolation .
              cd bundle
              python create_and_pack_executable.py
          - script: sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0
            displayName: "install libs"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist2
              artifactName: execs

      - job: macos_pyinstaller
        pool: {vmImage: 'macOS-10.14'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: sudo xcode-select -s /Applications/Xcode_10.app/Contents/Developer
          - bash: |
              python -m pip install -r requirements.txt
              python -m pip install pyinstaller PyQt5 wheel
              python -m pip install --no-build-isolation .
              cd bundle
              python create_and_pack_executable.py
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist2
              artifactName: execs

      - job: windows_pyinstaller
        pool: {vmImage: 'vs2017-win2016'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install -r requirements.txt
              python -m pip install pyinstaller PyQt5 wheel
              python -m pip install --no-build-isolation .
              cd bundle
              python create_and_pack_executable.py
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist2
              artifactName: execs
  - stage: Tests
    jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-16.04'}
      strategy:
        matrix:
          Python36: { python.version: '3.6', toxenv: "36" }
          Python37: { python.version: '3.7', toxenv: "37" }
          Python38: { python.version: '3.8', toxenv: "38" }
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '$(python.version)'}}
        - script: sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0
          displayName: "install libs"
        - script: pip install tox cython numpy pytest-azurepipelines
          displayName: "Install deps"
        - script: tox -e 'py$(toxenv)-PyQt5,py$(toxenv)-PySide2'
          displayName: "Run Tox"
    - job: macos
      pool: {vmImage: 'macOS-10.14'}
      strategy:
        matrix:
          Python36: { python.version: '3.6', toxenv: "36" }
          Python37: { python.version: '3.7', toxenv: "37" }
          Python38: { python.version: '3.8', toxenv: "38" }
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '$(python.version)'}}
        - script: pip install tox cython numpy pytest-azurepipelines
          displayName: "Install deps"
        - script: tox -e 'py$(toxenv)-PyQt5,py$(toxenv)-PySide2'
          displayName: "Run Tox"
    - job: windows
      pool: {vmImage: 'windows-2019'}
      continueOnError: true
      variables:
        PYTHON_ARCH: 64
        # VISPY_GL_LIB: $(Build.SourcesDirectory)\opengl32.dll
      strategy:
        matrix:
          Python36: { python.version: '3.6', toxenv: "36" }
          Python37: { python.version: '3.7', toxenv: "37" }
          Python38: { python.version: '3.8', toxenv: "38" }
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '$(python.version)'}}
        - powershell: Invoke-RestMethod -Uri https://raw.githubusercontent.com/vispy/vispy/v0.5.3/make/install_opengl.ps1 -Method Get -OutFile opengl.ps1
        - powershell: ./opengl.ps1
        - powershell: rm opengl.ps1
        - bash: |
            echo $VISPY_GL_LIB
            echo $PWD
        - script: dir $(Build.SourcesDirectory)
        - script: pip install tox cython numpy pytest-azurepipelines
          displayName: "Install deps"
        - script: tox -e py$(toxenv)-PyQt5,py$(toxenv)-PySide2
          displayName: "Run Tox"