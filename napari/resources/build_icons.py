"""Utility script to generate copies of icons with colors based
on our themes. Neccessary workaround because qt does not allow
for styling svg elements using qss
"""

import os
import shutil
from subprocess import run
from typing import Optional

from ..utils.theme import palettes

RESOURCES_DIR = os.path.abspath(os.path.dirname(__file__))
SVGPATH = os.path.join(RESOURCES_DIR, 'icons')
ICONS = [
    i.replace('.svg', '')
    for i in sorted(os.listdir(SVGPATH))
    if i.endswith('.svg')
]

TEXT_ICONS = ['visibility']

HIGHLIGHT_ICONS = ['visibility_off', 'menu']

SECONDARY_ICONS = [
    'drop_down',
    'plus',
    'minus',
    'properties_contract',
    'properties_expand',
]

svg_style_insert = """<style type="text/css">
    path{fill:{{ color }}}
    polygon{fill:{{ color }}}
    circle{fill:{{ color }}}
    rect{fill:{{ color }}}
</style>"""


def build_resources(qrcpath=None, overwrite=None):
    qrcpath = qrcpath or os.path.join(RESOURCES_DIR, 'res.qrc')

    if os.path.exists(qrcpath) and (not overwrite):
        return qrcpath

    qrc_string = """
    <!DOCTYPE RCC>
    <RCC version="1.0">
    <qresource>
    """

    for name, palette in palettes.items():
        palette_dir = os.path.join(os.path.dirname(qrcpath), 'themes', name)
        os.makedirs(palette_dir, exist_ok=True)
        for icon in ICONS:
            file = icon + '.svg'
            qrc_string += f'\n    <file>themes/{name}/{file}</file>'
            if icon in TEXT_ICONS:
                css = svg_style_insert.replace('{{ color }}', palette['text'])
            elif icon in HIGHLIGHT_ICONS:
                css = svg_style_insert.replace(
                    '{{ color }}', palette['highlight']
                )
            elif icon in SECONDARY_ICONS:
                css = svg_style_insert.replace(
                    '{{ color }}', palette['secondary']
                )
            else:
                css = svg_style_insert.replace('{{ color }}', palette['icon'])
            with open(os.path.join(SVGPATH, file), 'r') as fr:
                contents = fr.readlines()
                fr.close()
                contents.insert(4, css)
                with open(os.path.join(palette_dir, file), 'w') as fw:
                    fw.write("".join(contents))
                    fw.close()

    qrc_string += '''
    </qresource>
    </RCC>
    '''

    with open(qrcpath, 'w') as f:
        f.write(qrc_string)

    return qrcpath


def build_pyqt_resources(
    out_path: Optional[str] = None, overwrite: bool = False
) -> str:
    """Build a res.qrc file from icons and convert for python usage.

    calls :func:`build_resources` and then converts using ``pyside2-rcc`` or
    ``pyrcc5`` depending on which is installed in the environment.
    Finally, cleans up autogenerated icon.svgs and res.qrc file after _qt.py
    file is generated

    References
    ----------
    https://doc.qt.io/qt-5/resources.html

    Parameters
    ----------
    out_path : str, optional
        Path to write the converted "qt.py" resource file, by default
        os.path.join(RESOURCES_DIR, 'qt.py')
    overwrite : bool, optional
        Whether to force rebuilding of the out file, by default False

    Returns
    -------
    str
        Path to the converted python resource file.  Import this file to make
        the svg and other resources available to Qt stylesheets.
    """
    out_path = out_path or os.path.join(RESOURCES_DIR, '_qt.py')
    if os.path.exists(out_path) and not overwrite:
        return out_path

    # build the resource file to the same path
    qrc_path = os.path.join(os.path.dirname(out_path), 'res.qrc')
    qrc_path = build_resources(qrc_path, overwrite=overwrite)

    # then convert it to a python file
    try:
        run(['pyrcc5', '-o', out_path, qrc_path])
    except FileNotFoundError:
        run(['pyside2-rcc', '-o', out_path, qrc_path])

    # make sure we import from qtpy
    with open(out_path, "rt") as fin:
        data = fin.read()
        data = data.replace('PySide2', 'qtpy').replace('PyQt5', 'qtpy')
    with open(out_path, "wt") as fin:
        fin.write(data)

    # cleanup.
    # we do this here because pip uninstall napari would not collect these
    palette_dir = os.path.join(os.path.dirname(qrc_path), 'themes')
    shutil.rmtree(palette_dir, ignore_errors=True)
    try:
        os.remove(qrc_path)
    except Exception:
        pass
    return out_path
